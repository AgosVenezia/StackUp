"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Hbar = _interopRequireDefault(require("./Hbar.cjs"));
var _FileId = _interopRequireDefault(require("./file/FileId.cjs"));
var _Transaction = _interopRequireWildcard(require("./transaction/Transaction.cjs"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*-
 * ‌
 * Hedera JavaScript SDK
 * ​
 * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").proto.ITransaction} HashgraphProto.proto.ITransaction
 * @typedef {import("@hashgraph/proto").proto.ISignedTransaction} HashgraphProto.proto.ISignedTransaction
 * @typedef {import("@hashgraph/proto").proto.TransactionBody} HashgraphProto.proto.TransactionBody
 * @typedef {import("@hashgraph/proto").proto.ITransactionBody} HashgraphProto.proto.ITransactionBody
 * @typedef {import("@hashgraph/proto").proto.ITransactionResponse} HashgraphProto.proto.ITransactionResponse
 * @typedef {import("@hashgraph/proto").proto.IEthereumTransactionBody} HashgraphProto.proto.IEthereumTransactionBody
 * @typedef {import("@hashgraph/proto").proto.IAccountID} HashgraphProto.proto.IAccountID
 */

/**
 * @typedef {import("bignumber.js").default} BigNumber
 * @typedef {import("./account/AccountId.js").default} AccountId
 * @typedef {import("./channel/Channel.js").default} Channel
 * @typedef {import("./client/Client.js").default<*, *>} Client
 * @typedef {import("./Timestamp.js").default} Timestamp
 * @typedef {import("./transaction/TransactionId.js").default} TransactionId
 * @typedef {import("long").Long} Long
 */

/**
 * Create a new Hedera™ transaction wrapped ethereum transaction.
 */
class EthereumTransaction extends _Transaction.default {
  /**
   * @param {object} [props]
   * @param {Uint8Array} [props.ethereumData]
   * @param {FileId} [props.callData]
   * @param {FileId} [props.callDataFileId]
   * @param {number | string | Long | BigNumber | Hbar} [props.maxGasAllowance]
   */
  constructor(props = {}) {
    super();

    /**
     * @private
     * @type {?Uint8Array}
     */
    this._ethereumData = null;

    /**
     * @private
     * @type {?FileId}
     */
    this._callDataFileId = null;

    /**
     * @private
     * @type {?Hbar}
     */
    this._maxGasAllowance = null;
    if (props.ethereumData != null) {
      this.setEthereumData(props.ethereumData);
    }
    if (props.callData != null) {
      this.setCallDataFileId(props.callData);
    }
    if (props.callDataFileId != null) {
      this.setCallDataFileId(props.callDataFileId);
    }
    if (props.maxGasAllowance != null) {
      this.setMaxGasAllowanceHbar(props.maxGasAllowance);
    }
  }

  /**
   * @internal
   * @param {HashgraphProto.proto.ITransaction[]} transactions
   * @param {HashgraphProto.proto.ISignedTransaction[]} signedTransactions
   * @param {TransactionId[]} transactionIds
   * @param {AccountId[]} nodeIds
   * @param {HashgraphProto.proto.ITransactionBody[]} bodies
   * @returns {EthereumTransaction}
   */
  static _fromProtobuf(transactions, signedTransactions, transactionIds, nodeIds, bodies) {
    const body = bodies[0];
    const transaction = /** @type {HashgraphProto.proto.IEthereumTransactionBody} */
    body.ethereumTransaction;
    return _Transaction.default._fromProtobufTransactions(new EthereumTransaction({
      ethereumData: transaction.ethereumData != null ? transaction.ethereumData : undefined,
      callData: transaction.callData != null ? _FileId.default._fromProtobuf(transaction.callData) : undefined,
      maxGasAllowance: transaction.maxGasAllowance != null ? _Hbar.default.fromTinybars(transaction.maxGasAllowance) : undefined
    }), transactions, signedTransactions, transactionIds, nodeIds, bodies);
  }

  /**
   * @returns {?(Uint8Array | FileId)}
   */
  get ethereumData() {
    return this._ethereumData;
  }

  /**
   * The raw Ethereum transaction (RLP encoded type 0, 1, and 2). Complete
   * unless the callData field is set.
   *
   * @param {Uint8Array} ethereumData
   * @returns {this}
   */
  setEthereumData(ethereumData) {
    this._requireNotFrozen();
    this._ethereumData = ethereumData;
    return this;
  }

  /**
   * @deprecated - Use `callDataFileId` instead
   * @returns {?FileId}
   */
  get callData() {
    return this.callDataFileId;
  }

  /**
   * @deprecated - Use `setCallDataFileId()` instead
   *
   * For large transactions (for example contract create) this is the callData
   * of the callData. The data in the callData will be re-written with
   * the callData element as a zero length string with the original contents in
   * the referenced file at time of execution. The callData will need to be
   * "rehydrated" with the callData for signature validation to pass.
   * @param {FileId} callDataFileId
   * @returns {this}
   */
  setCallData(callDataFileId) {
    return this.setCallDataFileId(callDataFileId);
  }

  /**
   * @returns {?FileId}
   */
  get callDataFileId() {
    return this._callDataFileId;
  }

  /**
   * For large transactions (for example contract create) this is the callData
   * of the callData. The data in the callData will be re-written with
   * the callData element as a zero length string with the original contents in
   * the referenced file at time of execution. The callData will need to be
   * "rehydrated" with the callData for signature validation to pass.
   *
   * @param {FileId} callDataFileId
   * @returns {this}
   */
  setCallDataFileId(callDataFileId) {
    this._requireNotFrozen();
    this._callDataFileId = callDataFileId;
    return this;
  }

  /**
   * @returns {?Hbar}
   */
  get maxGasAllowance() {
    return this._maxGasAllowance;
  }

  /**
   * @deprecated -- use setMaxGasAllowanceHbar instead
   * @param {number | string | Long | BigNumber | Hbar} maxGasAllowance
   * @returns {this}
   */
  setMaxGasAllowance(maxGasAllowance) {
    return this.setMaxGasAllowanceHbar(maxGasAllowance);
  }

  /**
   * The maximum amount, in tinybars, that the payer of the hedera transaction
   * is willing to pay to complete the transaction.
   *
   * Ordinarily the account with the ECDSA alias corresponding to the public
   * key that is extracted from the ethereum_data signature is responsible for
   * fees that result from the execution of the transaction. If that amount of
   * authorized fees is not sufficient then the payer of the transaction can be
   * charged, up to but not exceeding this amount. If the ethereum_data
   * transaction authorized an amount that was insufficient then the payer will
   * only be charged the amount needed to make up the difference. If the gas
   * price in the transaction was set to zero then the payer will be assessed
   * the entire fee.
   *
   * @param {number | string | Long | BigNumber | Hbar} maxGasAllowance
   * @returns {this}
   */
  setMaxGasAllowanceHbar(maxGasAllowance) {
    this._requireNotFrozen();
    this._maxGasAllowance = maxGasAllowance instanceof _Hbar.default ? maxGasAllowance : new _Hbar.default(maxGasAllowance);
    return this;
  }

  /**
   * @param {Client} client
   */
  _validateChecksums(client) {
    if (this._ethereumData != null && this._ethereumData instanceof _FileId.default) {
      this._ethereumData.validateChecksum(client);
    }
  }

  /**
   * @override
   * @internal
   * @param {Channel} channel
   * @param {HashgraphProto.proto.ITransaction} request
   * @returns {Promise<HashgraphProto.proto.ITransactionResponse>}
   */
  _execute(channel, request) {
    return channel.smartContract.callEthereum(request);
  }

  /**
   * @override
   * @protected
   * @returns {NonNullable<HashgraphProto.proto.TransactionBody["data"]>}
   */
  _getTransactionDataCase() {
    return "ethereumTransaction";
  }

  /**
   * @override
   * @protected
   * @returns {HashgraphProto.proto.IEthereumTransactionBody}
   */
  _makeTransactionData() {
    return {
      ethereumData: this._ethereumData,
      callData: this._callDataFileId != null ? this._callDataFileId._toProtobuf() : null,
      maxGasAllowance: this._maxGasAllowance != null ? this._maxGasAllowance.toTinybars() : null
    };
  }

  /**
   * @returns {string}
   */
  _getLogId() {
    const timestamp = /** @type {import("./Timestamp.js").default} */
    this._transactionIds.current.validStart;
    return `EthereumTransaction:${timestamp.toString()}`;
  }
}
exports.default = EthereumTransaction;
_Transaction.TRANSACTION_REGISTRY.set("ethereumTransaction",
// eslint-disable-next-line @typescript-eslint/unbound-method
EthereumTransaction._fromProtobuf);