// source: BasicTypes.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Timestamp_pb = require('./Timestamp_pb.js');
goog.object.extend(proto, Timestamp_pb);
goog.exportSymbol('proto.proto.AccountAmount', null, global);
goog.exportSymbol('proto.proto.AccountID', null, global);
goog.exportSymbol('proto.proto.ContractID', null, global);
goog.exportSymbol('proto.proto.CurrentAndNextFeeSchedule', null, global);
goog.exportSymbol('proto.proto.FeeComponents', null, global);
goog.exportSymbol('proto.proto.FeeData', null, global);
goog.exportSymbol('proto.proto.FeeSchedule', null, global);
goog.exportSymbol('proto.proto.FileID', null, global);
goog.exportSymbol('proto.proto.HederaFunctionality', null, global);
goog.exportSymbol('proto.proto.Key', null, global);
goog.exportSymbol('proto.proto.Key.KeyCase', null, global);
goog.exportSymbol('proto.proto.KeyList', null, global);
goog.exportSymbol('proto.proto.NodeAddress', null, global);
goog.exportSymbol('proto.proto.NodeAddressBook', null, global);
goog.exportSymbol('proto.proto.RealmID', null, global);
goog.exportSymbol('proto.proto.ScheduleID', null, global);
goog.exportSymbol('proto.proto.SemanticVersion', null, global);
goog.exportSymbol('proto.proto.ServiceEndpoint', null, global);
goog.exportSymbol('proto.proto.ServicesConfigurationList', null, global);
goog.exportSymbol('proto.proto.Setting', null, global);
goog.exportSymbol('proto.proto.ShardID', null, global);
goog.exportSymbol('proto.proto.Signature', null, global);
goog.exportSymbol('proto.proto.Signature.SignatureCase', null, global);
goog.exportSymbol('proto.proto.SignatureList', null, global);
goog.exportSymbol('proto.proto.SignatureMap', null, global);
goog.exportSymbol('proto.proto.SignaturePair', null, global);
goog.exportSymbol('proto.proto.SignaturePair.SignatureCase', null, global);
goog.exportSymbol('proto.proto.ThresholdKey', null, global);
goog.exportSymbol('proto.proto.ThresholdSignature', null, global);
goog.exportSymbol('proto.proto.TokenBalance', null, global);
goog.exportSymbol('proto.proto.TokenBalances', null, global);
goog.exportSymbol('proto.proto.TokenFreezeStatus', null, global);
goog.exportSymbol('proto.proto.TokenID', null, global);
goog.exportSymbol('proto.proto.TokenKycStatus', null, global);
goog.exportSymbol('proto.proto.TokenRelationship', null, global);
goog.exportSymbol('proto.proto.TokenTransferList', null, global);
goog.exportSymbol('proto.proto.TopicID', null, global);
goog.exportSymbol('proto.proto.TransactionFeeSchedule', null, global);
goog.exportSymbol('proto.proto.TransactionID', null, global);
goog.exportSymbol('proto.proto.TransferList', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ShardID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ShardID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ShardID.displayName = 'proto.proto.ShardID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.RealmID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.RealmID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.RealmID.displayName = 'proto.proto.RealmID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.AccountID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.AccountID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.AccountID.displayName = 'proto.proto.AccountID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FileID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FileID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FileID.displayName = 'proto.proto.FileID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ContractID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ContractID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ContractID.displayName = 'proto.proto.ContractID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TransactionID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.TransactionID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.TransactionID.displayName = 'proto.proto.TransactionID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.AccountAmount = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.AccountAmount, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.AccountAmount.displayName = 'proto.proto.AccountAmount';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TransferList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.TransferList.repeatedFields_, null);
};
goog.inherits(proto.proto.TransferList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.TransferList.displayName = 'proto.proto.TransferList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TokenTransferList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.TokenTransferList.repeatedFields_, null);
};
goog.inherits(proto.proto.TokenTransferList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.TokenTransferList.displayName = 'proto.proto.TokenTransferList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TopicID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.TopicID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.TopicID.displayName = 'proto.proto.TopicID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TokenID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.TokenID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.TokenID.displayName = 'proto.proto.TokenID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ScheduleID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ScheduleID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ScheduleID.displayName = 'proto.proto.ScheduleID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Key = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.Key.oneofGroups_);
};
goog.inherits(proto.proto.Key, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Key.displayName = 'proto.proto.Key';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ThresholdKey = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ThresholdKey, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ThresholdKey.displayName = 'proto.proto.ThresholdKey';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.KeyList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.KeyList.repeatedFields_, null);
};
goog.inherits(proto.proto.KeyList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.KeyList.displayName = 'proto.proto.KeyList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Signature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.Signature.oneofGroups_);
};
goog.inherits(proto.proto.Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Signature.displayName = 'proto.proto.Signature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ThresholdSignature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ThresholdSignature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ThresholdSignature.displayName = 'proto.proto.ThresholdSignature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SignatureList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.SignatureList.repeatedFields_, null);
};
goog.inherits(proto.proto.SignatureList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SignatureList.displayName = 'proto.proto.SignatureList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SignaturePair = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.proto.SignaturePair.oneofGroups_);
};
goog.inherits(proto.proto.SignaturePair, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SignaturePair.displayName = 'proto.proto.SignaturePair';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SignatureMap = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.SignatureMap.repeatedFields_, null);
};
goog.inherits(proto.proto.SignatureMap, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SignatureMap.displayName = 'proto.proto.SignatureMap';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FeeComponents = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FeeComponents, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FeeComponents.displayName = 'proto.proto.FeeComponents';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TransactionFeeSchedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.TransactionFeeSchedule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.TransactionFeeSchedule.displayName = 'proto.proto.TransactionFeeSchedule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FeeData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.FeeData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FeeData.displayName = 'proto.proto.FeeData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.FeeSchedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.FeeSchedule.repeatedFields_, null);
};
goog.inherits(proto.proto.FeeSchedule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.FeeSchedule.displayName = 'proto.proto.FeeSchedule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.CurrentAndNextFeeSchedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.CurrentAndNextFeeSchedule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.CurrentAndNextFeeSchedule.displayName = 'proto.proto.CurrentAndNextFeeSchedule';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ServiceEndpoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.ServiceEndpoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ServiceEndpoint.displayName = 'proto.proto.ServiceEndpoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.NodeAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.NodeAddress.repeatedFields_, null);
};
goog.inherits(proto.proto.NodeAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.NodeAddress.displayName = 'proto.proto.NodeAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.NodeAddressBook = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.NodeAddressBook.repeatedFields_, null);
};
goog.inherits(proto.proto.NodeAddressBook, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.NodeAddressBook.displayName = 'proto.proto.NodeAddressBook';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.SemanticVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.SemanticVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.SemanticVersion.displayName = 'proto.proto.SemanticVersion';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Setting = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Setting, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Setting.displayName = 'proto.proto.Setting';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.ServicesConfigurationList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.ServicesConfigurationList.repeatedFields_, null);
};
goog.inherits(proto.proto.ServicesConfigurationList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.ServicesConfigurationList.displayName = 'proto.proto.ServicesConfigurationList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TokenRelationship = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.TokenRelationship, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.TokenRelationship.displayName = 'proto.proto.TokenRelationship';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TokenBalance = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.TokenBalance, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.TokenBalance.displayName = 'proto.proto.TokenBalance';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.TokenBalances = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.proto.TokenBalances.repeatedFields_, null);
};
goog.inherits(proto.proto.TokenBalances, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.TokenBalances.displayName = 'proto.proto.TokenBalances';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ShardID.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ShardID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ShardID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ShardID.toObject = function(includeInstance, msg) {
  var f, obj = {
    shardnum: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ShardID}
 */
proto.proto.ShardID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ShardID;
  return proto.proto.ShardID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ShardID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ShardID}
 */
proto.proto.ShardID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShardnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ShardID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ShardID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ShardID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ShardID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardnum();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
};


/**
 * optional int64 shardNum = 1;
 * @return {number}
 */
proto.proto.ShardID.prototype.getShardnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.ShardID} returns this
 */
proto.proto.ShardID.prototype.setShardnum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.RealmID.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.RealmID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.RealmID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RealmID.toObject = function(includeInstance, msg) {
  var f, obj = {
    shardnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    realmnum: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.RealmID}
 */
proto.proto.RealmID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.RealmID;
  return proto.proto.RealmID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.RealmID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.RealmID}
 */
proto.proto.RealmID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShardnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRealmnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.RealmID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.RealmID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.RealmID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.RealmID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardnum();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRealmnum();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional int64 shardNum = 1;
 * @return {number}
 */
proto.proto.RealmID.prototype.getShardnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.RealmID} returns this
 */
proto.proto.RealmID.prototype.setShardnum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 realmNum = 2;
 * @return {number}
 */
proto.proto.RealmID.prototype.getRealmnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.RealmID} returns this
 */
proto.proto.RealmID.prototype.setRealmnum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.AccountID.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.AccountID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.AccountID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AccountID.toObject = function(includeInstance, msg) {
  var f, obj = {
    shardnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    realmnum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    accountnum: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.AccountID}
 */
proto.proto.AccountID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.AccountID;
  return proto.proto.AccountID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.AccountID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.AccountID}
 */
proto.proto.AccountID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShardnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRealmnum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAccountnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.AccountID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.AccountID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.AccountID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AccountID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardnum();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRealmnum();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getAccountnum();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 shardNum = 1;
 * @return {number}
 */
proto.proto.AccountID.prototype.getShardnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.AccountID} returns this
 */
proto.proto.AccountID.prototype.setShardnum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 realmNum = 2;
 * @return {number}
 */
proto.proto.AccountID.prototype.getRealmnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.AccountID} returns this
 */
proto.proto.AccountID.prototype.setRealmnum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 accountNum = 3;
 * @return {number}
 */
proto.proto.AccountID.prototype.getAccountnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.AccountID} returns this
 */
proto.proto.AccountID.prototype.setAccountnum = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FileID.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FileID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FileID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FileID.toObject = function(includeInstance, msg) {
  var f, obj = {
    shardnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    realmnum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    filenum: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FileID}
 */
proto.proto.FileID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FileID;
  return proto.proto.FileID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FileID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FileID}
 */
proto.proto.FileID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShardnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRealmnum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setFilenum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FileID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FileID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FileID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FileID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardnum();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRealmnum();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getFilenum();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 shardNum = 1;
 * @return {number}
 */
proto.proto.FileID.prototype.getShardnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FileID} returns this
 */
proto.proto.FileID.prototype.setShardnum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 realmNum = 2;
 * @return {number}
 */
proto.proto.FileID.prototype.getRealmnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FileID} returns this
 */
proto.proto.FileID.prototype.setRealmnum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 fileNum = 3;
 * @return {number}
 */
proto.proto.FileID.prototype.getFilenum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.FileID} returns this
 */
proto.proto.FileID.prototype.setFilenum = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ContractID.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ContractID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ContractID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ContractID.toObject = function(includeInstance, msg) {
  var f, obj = {
    shardnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    realmnum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    contractnum: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ContractID}
 */
proto.proto.ContractID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ContractID;
  return proto.proto.ContractID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ContractID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ContractID}
 */
proto.proto.ContractID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShardnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRealmnum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setContractnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ContractID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ContractID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ContractID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ContractID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardnum();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRealmnum();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getContractnum();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 shardNum = 1;
 * @return {number}
 */
proto.proto.ContractID.prototype.getShardnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.ContractID} returns this
 */
proto.proto.ContractID.prototype.setShardnum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 realmNum = 2;
 * @return {number}
 */
proto.proto.ContractID.prototype.getRealmnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.ContractID} returns this
 */
proto.proto.ContractID.prototype.setRealmnum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 contractNum = 3;
 * @return {number}
 */
proto.proto.ContractID.prototype.getContractnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.ContractID} returns this
 */
proto.proto.ContractID.prototype.setContractnum = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TransactionID.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TransactionID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TransactionID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TransactionID.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionvalidstart: (f = msg.getTransactionvalidstart()) && Timestamp_pb.Timestamp.toObject(includeInstance, f),
    accountid: (f = msg.getAccountid()) && proto.proto.AccountID.toObject(includeInstance, f),
    scheduled: jspb.Message.getBooleanFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TransactionID}
 */
proto.proto.TransactionID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TransactionID;
  return proto.proto.TransactionID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TransactionID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TransactionID}
 */
proto.proto.TransactionID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new Timestamp_pb.Timestamp;
      reader.readMessage(value,Timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTransactionvalidstart(value);
      break;
    case 2:
      var value = new proto.proto.AccountID;
      reader.readMessage(value,proto.proto.AccountID.deserializeBinaryFromReader);
      msg.setAccountid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setScheduled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TransactionID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TransactionID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TransactionID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TransactionID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionvalidstart();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      Timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAccountid();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.AccountID.serializeBinaryToWriter
    );
  }
  f = message.getScheduled();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional Timestamp transactionValidStart = 1;
 * @return {?proto.proto.Timestamp}
 */
proto.proto.TransactionID.prototype.getTransactionvalidstart = function() {
  return /** @type{?proto.proto.Timestamp} */ (
    jspb.Message.getWrapperField(this, Timestamp_pb.Timestamp, 1));
};


/**
 * @param {?proto.proto.Timestamp|undefined} value
 * @return {!proto.proto.TransactionID} returns this
*/
proto.proto.TransactionID.prototype.setTransactionvalidstart = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.TransactionID} returns this
 */
proto.proto.TransactionID.prototype.clearTransactionvalidstart = function() {
  return this.setTransactionvalidstart(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TransactionID.prototype.hasTransactionvalidstart = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AccountID accountID = 2;
 * @return {?proto.proto.AccountID}
 */
proto.proto.TransactionID.prototype.getAccountid = function() {
  return /** @type{?proto.proto.AccountID} */ (
    jspb.Message.getWrapperField(this, proto.proto.AccountID, 2));
};


/**
 * @param {?proto.proto.AccountID|undefined} value
 * @return {!proto.proto.TransactionID} returns this
*/
proto.proto.TransactionID.prototype.setAccountid = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.TransactionID} returns this
 */
proto.proto.TransactionID.prototype.clearAccountid = function() {
  return this.setAccountid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TransactionID.prototype.hasAccountid = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool scheduled = 3;
 * @return {boolean}
 */
proto.proto.TransactionID.prototype.getScheduled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.proto.TransactionID} returns this
 */
proto.proto.TransactionID.prototype.setScheduled = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.AccountAmount.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.AccountAmount.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.AccountAmount} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AccountAmount.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountid: (f = msg.getAccountid()) && proto.proto.AccountID.toObject(includeInstance, f),
    amount: jspb.Message.getFieldWithDefault(msg, 2, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.AccountAmount}
 */
proto.proto.AccountAmount.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.AccountAmount;
  return proto.proto.AccountAmount.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.AccountAmount} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.AccountAmount}
 */
proto.proto.AccountAmount.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.AccountID;
      reader.readMessage(value,proto.proto.AccountID.deserializeBinaryFromReader);
      msg.setAccountid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readSint64String());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.AccountAmount.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.AccountAmount.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.AccountAmount} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.AccountAmount.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.AccountID.serializeBinaryToWriter
    );
  }
  f = message.getAmount();
  if (parseInt(f, 10) !== 0) {
    writer.writeSint64String(
      2,
      f
    );
  }
};


/**
 * optional AccountID accountID = 1;
 * @return {?proto.proto.AccountID}
 */
proto.proto.AccountAmount.prototype.getAccountid = function() {
  return /** @type{?proto.proto.AccountID} */ (
    jspb.Message.getWrapperField(this, proto.proto.AccountID, 1));
};


/**
 * @param {?proto.proto.AccountID|undefined} value
 * @return {!proto.proto.AccountAmount} returns this
*/
proto.proto.AccountAmount.prototype.setAccountid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.AccountAmount} returns this
 */
proto.proto.AccountAmount.prototype.clearAccountid = function() {
  return this.setAccountid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.AccountAmount.prototype.hasAccountid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional sint64 amount = 2;
 * @return {string}
 */
proto.proto.AccountAmount.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.proto.AccountAmount} returns this
 */
proto.proto.AccountAmount.prototype.setAmount = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.TransferList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TransferList.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TransferList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TransferList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TransferList.toObject = function(includeInstance, msg) {
  var f, obj = {
    accountamountsList: jspb.Message.toObjectList(msg.getAccountamountsList(),
    proto.proto.AccountAmount.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TransferList}
 */
proto.proto.TransferList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TransferList;
  return proto.proto.TransferList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TransferList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TransferList}
 */
proto.proto.TransferList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.AccountAmount;
      reader.readMessage(value,proto.proto.AccountAmount.deserializeBinaryFromReader);
      msg.addAccountamounts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TransferList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TransferList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TransferList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TransferList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccountamountsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.AccountAmount.serializeBinaryToWriter
    );
  }
};


/**
 * repeated AccountAmount accountAmounts = 1;
 * @return {!Array<!proto.proto.AccountAmount>}
 */
proto.proto.TransferList.prototype.getAccountamountsList = function() {
  return /** @type{!Array<!proto.proto.AccountAmount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.AccountAmount, 1));
};


/**
 * @param {!Array<!proto.proto.AccountAmount>} value
 * @return {!proto.proto.TransferList} returns this
*/
proto.proto.TransferList.prototype.setAccountamountsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.AccountAmount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.AccountAmount}
 */
proto.proto.TransferList.prototype.addAccountamounts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.AccountAmount, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.TransferList} returns this
 */
proto.proto.TransferList.prototype.clearAccountamountsList = function() {
  return this.setAccountamountsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.TokenTransferList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TokenTransferList.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TokenTransferList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TokenTransferList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenTransferList.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: (f = msg.getToken()) && proto.proto.TokenID.toObject(includeInstance, f),
    transfersList: jspb.Message.toObjectList(msg.getTransfersList(),
    proto.proto.AccountAmount.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TokenTransferList}
 */
proto.proto.TokenTransferList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TokenTransferList;
  return proto.proto.TokenTransferList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TokenTransferList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TokenTransferList}
 */
proto.proto.TokenTransferList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.TokenID;
      reader.readMessage(value,proto.proto.TokenID.deserializeBinaryFromReader);
      msg.setToken(value);
      break;
    case 2:
      var value = new proto.proto.AccountAmount;
      reader.readMessage(value,proto.proto.AccountAmount.deserializeBinaryFromReader);
      msg.addTransfers(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TokenTransferList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TokenTransferList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TokenTransferList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenTransferList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.TokenID.serializeBinaryToWriter
    );
  }
  f = message.getTransfersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.AccountAmount.serializeBinaryToWriter
    );
  }
};


/**
 * optional TokenID token = 1;
 * @return {?proto.proto.TokenID}
 */
proto.proto.TokenTransferList.prototype.getToken = function() {
  return /** @type{?proto.proto.TokenID} */ (
    jspb.Message.getWrapperField(this, proto.proto.TokenID, 1));
};


/**
 * @param {?proto.proto.TokenID|undefined} value
 * @return {!proto.proto.TokenTransferList} returns this
*/
proto.proto.TokenTransferList.prototype.setToken = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.TokenTransferList} returns this
 */
proto.proto.TokenTransferList.prototype.clearToken = function() {
  return this.setToken(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TokenTransferList.prototype.hasToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated AccountAmount transfers = 2;
 * @return {!Array<!proto.proto.AccountAmount>}
 */
proto.proto.TokenTransferList.prototype.getTransfersList = function() {
  return /** @type{!Array<!proto.proto.AccountAmount>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.AccountAmount, 2));
};


/**
 * @param {!Array<!proto.proto.AccountAmount>} value
 * @return {!proto.proto.TokenTransferList} returns this
*/
proto.proto.TokenTransferList.prototype.setTransfersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.AccountAmount=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.AccountAmount}
 */
proto.proto.TokenTransferList.prototype.addTransfers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.AccountAmount, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.TokenTransferList} returns this
 */
proto.proto.TokenTransferList.prototype.clearTransfersList = function() {
  return this.setTransfersList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TopicID.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TopicID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TopicID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TopicID.toObject = function(includeInstance, msg) {
  var f, obj = {
    shardnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    realmnum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    topicnum: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TopicID}
 */
proto.proto.TopicID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TopicID;
  return proto.proto.TopicID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TopicID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TopicID}
 */
proto.proto.TopicID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShardnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRealmnum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTopicnum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TopicID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TopicID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TopicID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TopicID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardnum();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRealmnum();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTopicnum();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 shardNum = 1;
 * @return {number}
 */
proto.proto.TopicID.prototype.getShardnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.TopicID} returns this
 */
proto.proto.TopicID.prototype.setShardnum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 realmNum = 2;
 * @return {number}
 */
proto.proto.TopicID.prototype.getRealmnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.TopicID} returns this
 */
proto.proto.TopicID.prototype.setRealmnum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 topicNum = 3;
 * @return {number}
 */
proto.proto.TopicID.prototype.getTopicnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.TopicID} returns this
 */
proto.proto.TopicID.prototype.setTopicnum = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TokenID.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TokenID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TokenID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenID.toObject = function(includeInstance, msg) {
  var f, obj = {
    shardnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    realmnum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    tokennum: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TokenID}
 */
proto.proto.TokenID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TokenID;
  return proto.proto.TokenID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TokenID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TokenID}
 */
proto.proto.TokenID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShardnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRealmnum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTokennum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TokenID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TokenID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TokenID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardnum();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRealmnum();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getTokennum();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 shardNum = 1;
 * @return {number}
 */
proto.proto.TokenID.prototype.getShardnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.TokenID} returns this
 */
proto.proto.TokenID.prototype.setShardnum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 realmNum = 2;
 * @return {number}
 */
proto.proto.TokenID.prototype.getRealmnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.TokenID} returns this
 */
proto.proto.TokenID.prototype.setRealmnum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 tokenNum = 3;
 * @return {number}
 */
proto.proto.TokenID.prototype.getTokennum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.TokenID} returns this
 */
proto.proto.TokenID.prototype.setTokennum = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ScheduleID.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ScheduleID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ScheduleID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ScheduleID.toObject = function(includeInstance, msg) {
  var f, obj = {
    shardnum: jspb.Message.getFieldWithDefault(msg, 1, 0),
    realmnum: jspb.Message.getFieldWithDefault(msg, 2, 0),
    schedulenum: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ScheduleID}
 */
proto.proto.ScheduleID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ScheduleID;
  return proto.proto.ScheduleID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ScheduleID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ScheduleID}
 */
proto.proto.ScheduleID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setShardnum(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setRealmnum(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setSchedulenum(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ScheduleID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ScheduleID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ScheduleID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ScheduleID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getShardnum();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getRealmnum();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getSchedulenum();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional int64 shardNum = 1;
 * @return {number}
 */
proto.proto.ScheduleID.prototype.getShardnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.ScheduleID} returns this
 */
proto.proto.ScheduleID.prototype.setShardnum = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 realmNum = 2;
 * @return {number}
 */
proto.proto.ScheduleID.prototype.getRealmnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.ScheduleID} returns this
 */
proto.proto.ScheduleID.prototype.setRealmnum = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 scheduleNum = 3;
 * @return {number}
 */
proto.proto.ScheduleID.prototype.getSchedulenum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.ScheduleID} returns this
 */
proto.proto.ScheduleID.prototype.setSchedulenum = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.Key.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.proto.Key.KeyCase = {
  KEY_NOT_SET: 0,
  CONTRACTID: 1,
  ED25519: 2,
  RSA_3072: 3,
  ECDSA_384: 4,
  THRESHOLDKEY: 5,
  KEYLIST: 6
};

/**
 * @return {proto.proto.Key.KeyCase}
 */
proto.proto.Key.prototype.getKeyCase = function() {
  return /** @type {proto.proto.Key.KeyCase} */(jspb.Message.computeOneofCase(this, proto.proto.Key.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Key.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Key.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Key} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Key.toObject = function(includeInstance, msg) {
  var f, obj = {
    contractid: (f = msg.getContractid()) && proto.proto.ContractID.toObject(includeInstance, f),
    ed25519: msg.getEd25519_asB64(),
    rsa3072: msg.getRsa3072_asB64(),
    ecdsa384: msg.getEcdsa384_asB64(),
    thresholdkey: (f = msg.getThresholdkey()) && proto.proto.ThresholdKey.toObject(includeInstance, f),
    keylist: (f = msg.getKeylist()) && proto.proto.KeyList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Key}
 */
proto.proto.Key.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Key;
  return proto.proto.Key.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Key} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Key}
 */
proto.proto.Key.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.ContractID;
      reader.readMessage(value,proto.proto.ContractID.deserializeBinaryFromReader);
      msg.setContractid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEd25519(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRsa3072(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEcdsa384(value);
      break;
    case 5:
      var value = new proto.proto.ThresholdKey;
      reader.readMessage(value,proto.proto.ThresholdKey.deserializeBinaryFromReader);
      msg.setThresholdkey(value);
      break;
    case 6:
      var value = new proto.proto.KeyList;
      reader.readMessage(value,proto.proto.KeyList.deserializeBinaryFromReader);
      msg.setKeylist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Key.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Key.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Key} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Key.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getContractid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.ContractID.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getThresholdkey();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.ThresholdKey.serializeBinaryToWriter
    );
  }
  f = message.getKeylist();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.proto.KeyList.serializeBinaryToWriter
    );
  }
};


/**
 * optional ContractID contractID = 1;
 * @return {?proto.proto.ContractID}
 */
proto.proto.Key.prototype.getContractid = function() {
  return /** @type{?proto.proto.ContractID} */ (
    jspb.Message.getWrapperField(this, proto.proto.ContractID, 1));
};


/**
 * @param {?proto.proto.ContractID|undefined} value
 * @return {!proto.proto.Key} returns this
*/
proto.proto.Key.prototype.setContractid = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.proto.Key.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Key} returns this
 */
proto.proto.Key.prototype.clearContractid = function() {
  return this.setContractid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Key.prototype.hasContractid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes ed25519 = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Key.prototype.getEd25519 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes ed25519 = 2;
 * This is a type-conversion wrapper around `getEd25519()`
 * @return {string}
 */
proto.proto.Key.prototype.getEd25519_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEd25519()));
};


/**
 * optional bytes ed25519 = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEd25519()`
 * @return {!Uint8Array}
 */
proto.proto.Key.prototype.getEd25519_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEd25519()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.Key} returns this
 */
proto.proto.Key.prototype.setEd25519 = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.proto.Key.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Key} returns this
 */
proto.proto.Key.prototype.clearEd25519 = function() {
  return jspb.Message.setOneofField(this, 2, proto.proto.Key.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Key.prototype.hasEd25519 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes RSA_3072 = 3;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Key.prototype.getRsa3072 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes RSA_3072 = 3;
 * This is a type-conversion wrapper around `getRsa3072()`
 * @return {string}
 */
proto.proto.Key.prototype.getRsa3072_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRsa3072()));
};


/**
 * optional bytes RSA_3072 = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRsa3072()`
 * @return {!Uint8Array}
 */
proto.proto.Key.prototype.getRsa3072_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRsa3072()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.Key} returns this
 */
proto.proto.Key.prototype.setRsa3072 = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.proto.Key.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Key} returns this
 */
proto.proto.Key.prototype.clearRsa3072 = function() {
  return jspb.Message.setOneofField(this, 3, proto.proto.Key.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Key.prototype.hasRsa3072 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes ECDSA_384 = 4;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Key.prototype.getEcdsa384 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes ECDSA_384 = 4;
 * This is a type-conversion wrapper around `getEcdsa384()`
 * @return {string}
 */
proto.proto.Key.prototype.getEcdsa384_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEcdsa384()));
};


/**
 * optional bytes ECDSA_384 = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEcdsa384()`
 * @return {!Uint8Array}
 */
proto.proto.Key.prototype.getEcdsa384_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEcdsa384()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.Key} returns this
 */
proto.proto.Key.prototype.setEcdsa384 = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.proto.Key.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Key} returns this
 */
proto.proto.Key.prototype.clearEcdsa384 = function() {
  return jspb.Message.setOneofField(this, 4, proto.proto.Key.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Key.prototype.hasEcdsa384 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ThresholdKey thresholdKey = 5;
 * @return {?proto.proto.ThresholdKey}
 */
proto.proto.Key.prototype.getThresholdkey = function() {
  return /** @type{?proto.proto.ThresholdKey} */ (
    jspb.Message.getWrapperField(this, proto.proto.ThresholdKey, 5));
};


/**
 * @param {?proto.proto.ThresholdKey|undefined} value
 * @return {!proto.proto.Key} returns this
*/
proto.proto.Key.prototype.setThresholdkey = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.proto.Key.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Key} returns this
 */
proto.proto.Key.prototype.clearThresholdkey = function() {
  return this.setThresholdkey(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Key.prototype.hasThresholdkey = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional KeyList keyList = 6;
 * @return {?proto.proto.KeyList}
 */
proto.proto.Key.prototype.getKeylist = function() {
  return /** @type{?proto.proto.KeyList} */ (
    jspb.Message.getWrapperField(this, proto.proto.KeyList, 6));
};


/**
 * @param {?proto.proto.KeyList|undefined} value
 * @return {!proto.proto.Key} returns this
*/
proto.proto.Key.prototype.setKeylist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.proto.Key.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Key} returns this
 */
proto.proto.Key.prototype.clearKeylist = function() {
  return this.setKeylist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Key.prototype.hasKeylist = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ThresholdKey.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ThresholdKey.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ThresholdKey} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ThresholdKey.toObject = function(includeInstance, msg) {
  var f, obj = {
    threshold: jspb.Message.getFieldWithDefault(msg, 1, 0),
    keys: (f = msg.getKeys()) && proto.proto.KeyList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ThresholdKey}
 */
proto.proto.ThresholdKey.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ThresholdKey;
  return proto.proto.ThresholdKey.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ThresholdKey} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ThresholdKey}
 */
proto.proto.ThresholdKey.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setThreshold(value);
      break;
    case 2:
      var value = new proto.proto.KeyList;
      reader.readMessage(value,proto.proto.KeyList.deserializeBinaryFromReader);
      msg.setKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ThresholdKey.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ThresholdKey.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ThresholdKey} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ThresholdKey.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getThreshold();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getKeys();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.KeyList.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 threshold = 1;
 * @return {number}
 */
proto.proto.ThresholdKey.prototype.getThreshold = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.ThresholdKey} returns this
 */
proto.proto.ThresholdKey.prototype.setThreshold = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional KeyList keys = 2;
 * @return {?proto.proto.KeyList}
 */
proto.proto.ThresholdKey.prototype.getKeys = function() {
  return /** @type{?proto.proto.KeyList} */ (
    jspb.Message.getWrapperField(this, proto.proto.KeyList, 2));
};


/**
 * @param {?proto.proto.KeyList|undefined} value
 * @return {!proto.proto.ThresholdKey} returns this
*/
proto.proto.ThresholdKey.prototype.setKeys = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ThresholdKey} returns this
 */
proto.proto.ThresholdKey.prototype.clearKeys = function() {
  return this.setKeys(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ThresholdKey.prototype.hasKeys = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.KeyList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.KeyList.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.KeyList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.KeyList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.KeyList.toObject = function(includeInstance, msg) {
  var f, obj = {
    keysList: jspb.Message.toObjectList(msg.getKeysList(),
    proto.proto.Key.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.KeyList}
 */
proto.proto.KeyList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.KeyList;
  return proto.proto.KeyList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.KeyList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.KeyList}
 */
proto.proto.KeyList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Key;
      reader.readMessage(value,proto.proto.Key.deserializeBinaryFromReader);
      msg.addKeys(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.KeyList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.KeyList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.KeyList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.KeyList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKeysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Key.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Key keys = 1;
 * @return {!Array<!proto.proto.Key>}
 */
proto.proto.KeyList.prototype.getKeysList = function() {
  return /** @type{!Array<!proto.proto.Key>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Key, 1));
};


/**
 * @param {!Array<!proto.proto.Key>} value
 * @return {!proto.proto.KeyList} returns this
*/
proto.proto.KeyList.prototype.setKeysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.Key=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Key}
 */
proto.proto.KeyList.prototype.addKeys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.Key, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.KeyList} returns this
 */
proto.proto.KeyList.prototype.clearKeysList = function() {
  return this.setKeysList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.Signature.oneofGroups_ = [[1,2,3,4,5,6]];

/**
 * @enum {number}
 */
proto.proto.Signature.SignatureCase = {
  SIGNATURE_NOT_SET: 0,
  CONTRACT: 1,
  ED25519: 2,
  RSA_3072: 3,
  ECDSA_384: 4,
  THRESHOLDSIGNATURE: 5,
  SIGNATURELIST: 6
};

/**
 * @return {proto.proto.Signature.SignatureCase}
 */
proto.proto.Signature.prototype.getSignatureCase = function() {
  return /** @type {proto.proto.Signature.SignatureCase} */(jspb.Message.computeOneofCase(this, proto.proto.Signature.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Signature.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Signature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Signature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Signature.toObject = function(includeInstance, msg) {
  var f, obj = {
    contract: msg.getContract_asB64(),
    ed25519: msg.getEd25519_asB64(),
    rsa3072: msg.getRsa3072_asB64(),
    ecdsa384: msg.getEcdsa384_asB64(),
    thresholdsignature: (f = msg.getThresholdsignature()) && proto.proto.ThresholdSignature.toObject(includeInstance, f),
    signaturelist: (f = msg.getSignaturelist()) && proto.proto.SignatureList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Signature}
 */
proto.proto.Signature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Signature;
  return proto.proto.Signature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Signature}
 */
proto.proto.Signature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContract(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEd25519(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRsa3072(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEcdsa384(value);
      break;
    case 5:
      var value = new proto.proto.ThresholdSignature;
      reader.readMessage(value,proto.proto.ThresholdSignature.deserializeBinaryFromReader);
      msg.setThresholdsignature(value);
      break;
    case 6:
      var value = new proto.proto.SignatureList;
      reader.readMessage(value,proto.proto.SignatureList.deserializeBinaryFromReader);
      msg.setSignaturelist(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Signature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Signature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Signature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getThresholdsignature();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.proto.ThresholdSignature.serializeBinaryToWriter
    );
  }
  f = message.getSignaturelist();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.proto.SignatureList.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes contract = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Signature.prototype.getContract = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes contract = 1;
 * This is a type-conversion wrapper around `getContract()`
 * @return {string}
 */
proto.proto.Signature.prototype.getContract_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContract()));
};


/**
 * optional bytes contract = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContract()`
 * @return {!Uint8Array}
 */
proto.proto.Signature.prototype.getContract_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContract()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.Signature} returns this
 */
proto.proto.Signature.prototype.setContract = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.proto.Signature.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Signature} returns this
 */
proto.proto.Signature.prototype.clearContract = function() {
  return jspb.Message.setOneofField(this, 1, proto.proto.Signature.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Signature.prototype.hasContract = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes ed25519 = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Signature.prototype.getEd25519 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes ed25519 = 2;
 * This is a type-conversion wrapper around `getEd25519()`
 * @return {string}
 */
proto.proto.Signature.prototype.getEd25519_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEd25519()));
};


/**
 * optional bytes ed25519 = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEd25519()`
 * @return {!Uint8Array}
 */
proto.proto.Signature.prototype.getEd25519_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEd25519()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.Signature} returns this
 */
proto.proto.Signature.prototype.setEd25519 = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.proto.Signature.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Signature} returns this
 */
proto.proto.Signature.prototype.clearEd25519 = function() {
  return jspb.Message.setOneofField(this, 2, proto.proto.Signature.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Signature.prototype.hasEd25519 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes RSA_3072 = 3;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Signature.prototype.getRsa3072 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes RSA_3072 = 3;
 * This is a type-conversion wrapper around `getRsa3072()`
 * @return {string}
 */
proto.proto.Signature.prototype.getRsa3072_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRsa3072()));
};


/**
 * optional bytes RSA_3072 = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRsa3072()`
 * @return {!Uint8Array}
 */
proto.proto.Signature.prototype.getRsa3072_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRsa3072()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.Signature} returns this
 */
proto.proto.Signature.prototype.setRsa3072 = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.proto.Signature.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Signature} returns this
 */
proto.proto.Signature.prototype.clearRsa3072 = function() {
  return jspb.Message.setOneofField(this, 3, proto.proto.Signature.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Signature.prototype.hasRsa3072 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes ECDSA_384 = 4;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Signature.prototype.getEcdsa384 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes ECDSA_384 = 4;
 * This is a type-conversion wrapper around `getEcdsa384()`
 * @return {string}
 */
proto.proto.Signature.prototype.getEcdsa384_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEcdsa384()));
};


/**
 * optional bytes ECDSA_384 = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEcdsa384()`
 * @return {!Uint8Array}
 */
proto.proto.Signature.prototype.getEcdsa384_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEcdsa384()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.Signature} returns this
 */
proto.proto.Signature.prototype.setEcdsa384 = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.proto.Signature.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.Signature} returns this
 */
proto.proto.Signature.prototype.clearEcdsa384 = function() {
  return jspb.Message.setOneofField(this, 4, proto.proto.Signature.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Signature.prototype.hasEcdsa384 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ThresholdSignature thresholdSignature = 5;
 * @return {?proto.proto.ThresholdSignature}
 */
proto.proto.Signature.prototype.getThresholdsignature = function() {
  return /** @type{?proto.proto.ThresholdSignature} */ (
    jspb.Message.getWrapperField(this, proto.proto.ThresholdSignature, 5));
};


/**
 * @param {?proto.proto.ThresholdSignature|undefined} value
 * @return {!proto.proto.Signature} returns this
*/
proto.proto.Signature.prototype.setThresholdsignature = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.proto.Signature.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Signature} returns this
 */
proto.proto.Signature.prototype.clearThresholdsignature = function() {
  return this.setThresholdsignature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Signature.prototype.hasThresholdsignature = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional SignatureList signatureList = 6;
 * @return {?proto.proto.SignatureList}
 */
proto.proto.Signature.prototype.getSignaturelist = function() {
  return /** @type{?proto.proto.SignatureList} */ (
    jspb.Message.getWrapperField(this, proto.proto.SignatureList, 6));
};


/**
 * @param {?proto.proto.SignatureList|undefined} value
 * @return {!proto.proto.Signature} returns this
*/
proto.proto.Signature.prototype.setSignaturelist = function(value) {
  return jspb.Message.setOneofWrapperField(this, 6, proto.proto.Signature.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Signature} returns this
 */
proto.proto.Signature.prototype.clearSignaturelist = function() {
  return this.setSignaturelist(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Signature.prototype.hasSignaturelist = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ThresholdSignature.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ThresholdSignature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ThresholdSignature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ThresholdSignature.toObject = function(includeInstance, msg) {
  var f, obj = {
    sigs: (f = msg.getSigs()) && proto.proto.SignatureList.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ThresholdSignature}
 */
proto.proto.ThresholdSignature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ThresholdSignature;
  return proto.proto.ThresholdSignature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ThresholdSignature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ThresholdSignature}
 */
proto.proto.ThresholdSignature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.proto.SignatureList;
      reader.readMessage(value,proto.proto.SignatureList.deserializeBinaryFromReader);
      msg.setSigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ThresholdSignature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ThresholdSignature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ThresholdSignature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ThresholdSignature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSigs();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.SignatureList.serializeBinaryToWriter
    );
  }
};


/**
 * optional SignatureList sigs = 2;
 * @return {?proto.proto.SignatureList}
 */
proto.proto.ThresholdSignature.prototype.getSigs = function() {
  return /** @type{?proto.proto.SignatureList} */ (
    jspb.Message.getWrapperField(this, proto.proto.SignatureList, 2));
};


/**
 * @param {?proto.proto.SignatureList|undefined} value
 * @return {!proto.proto.ThresholdSignature} returns this
*/
proto.proto.ThresholdSignature.prototype.setSigs = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.ThresholdSignature} returns this
 */
proto.proto.ThresholdSignature.prototype.clearSigs = function() {
  return this.setSigs(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.ThresholdSignature.prototype.hasSigs = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.SignatureList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SignatureList.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SignatureList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SignatureList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SignatureList.toObject = function(includeInstance, msg) {
  var f, obj = {
    sigsList: jspb.Message.toObjectList(msg.getSigsList(),
    proto.proto.Signature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SignatureList}
 */
proto.proto.SignatureList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SignatureList;
  return proto.proto.SignatureList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SignatureList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SignatureList}
 */
proto.proto.SignatureList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.proto.Signature;
      reader.readMessage(value,proto.proto.Signature.deserializeBinaryFromReader);
      msg.addSigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SignatureList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SignatureList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SignatureList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SignatureList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.proto.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Signature sigs = 2;
 * @return {!Array<!proto.proto.Signature>}
 */
proto.proto.SignatureList.prototype.getSigsList = function() {
  return /** @type{!Array<!proto.proto.Signature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Signature, 2));
};


/**
 * @param {!Array<!proto.proto.Signature>} value
 * @return {!proto.proto.SignatureList} returns this
*/
proto.proto.SignatureList.prototype.setSigsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.proto.Signature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Signature}
 */
proto.proto.SignatureList.prototype.addSigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.proto.Signature, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.SignatureList} returns this
 */
proto.proto.SignatureList.prototype.clearSigsList = function() {
  return this.setSigsList([]);
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.proto.SignaturePair.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.proto.SignaturePair.SignatureCase = {
  SIGNATURE_NOT_SET: 0,
  CONTRACT: 2,
  ED25519: 3,
  RSA_3072: 4,
  ECDSA_384: 5
};

/**
 * @return {proto.proto.SignaturePair.SignatureCase}
 */
proto.proto.SignaturePair.prototype.getSignatureCase = function() {
  return /** @type {proto.proto.SignaturePair.SignatureCase} */(jspb.Message.computeOneofCase(this, proto.proto.SignaturePair.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SignaturePair.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SignaturePair.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SignaturePair} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SignaturePair.toObject = function(includeInstance, msg) {
  var f, obj = {
    pubkeyprefix: msg.getPubkeyprefix_asB64(),
    contract: msg.getContract_asB64(),
    ed25519: msg.getEd25519_asB64(),
    rsa3072: msg.getRsa3072_asB64(),
    ecdsa384: msg.getEcdsa384_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SignaturePair}
 */
proto.proto.SignaturePair.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SignaturePair;
  return proto.proto.SignaturePair.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SignaturePair} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SignaturePair}
 */
proto.proto.SignaturePair.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPubkeyprefix(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setContract(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEd25519(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRsa3072(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEcdsa384(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SignaturePair.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SignaturePair.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SignaturePair} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SignaturePair.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPubkeyprefix_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional bytes pubKeyPrefix = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.SignaturePair.prototype.getPubkeyprefix = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes pubKeyPrefix = 1;
 * This is a type-conversion wrapper around `getPubkeyprefix()`
 * @return {string}
 */
proto.proto.SignaturePair.prototype.getPubkeyprefix_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPubkeyprefix()));
};


/**
 * optional bytes pubKeyPrefix = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPubkeyprefix()`
 * @return {!Uint8Array}
 */
proto.proto.SignaturePair.prototype.getPubkeyprefix_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPubkeyprefix()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.SignaturePair} returns this
 */
proto.proto.SignaturePair.prototype.setPubkeyprefix = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes contract = 2;
 * @return {!(string|Uint8Array)}
 */
proto.proto.SignaturePair.prototype.getContract = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes contract = 2;
 * This is a type-conversion wrapper around `getContract()`
 * @return {string}
 */
proto.proto.SignaturePair.prototype.getContract_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getContract()));
};


/**
 * optional bytes contract = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getContract()`
 * @return {!Uint8Array}
 */
proto.proto.SignaturePair.prototype.getContract_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getContract()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.SignaturePair} returns this
 */
proto.proto.SignaturePair.prototype.setContract = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.proto.SignaturePair.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.SignaturePair} returns this
 */
proto.proto.SignaturePair.prototype.clearContract = function() {
  return jspb.Message.setOneofField(this, 2, proto.proto.SignaturePair.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.SignaturePair.prototype.hasContract = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes ed25519 = 3;
 * @return {!(string|Uint8Array)}
 */
proto.proto.SignaturePair.prototype.getEd25519 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes ed25519 = 3;
 * This is a type-conversion wrapper around `getEd25519()`
 * @return {string}
 */
proto.proto.SignaturePair.prototype.getEd25519_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEd25519()));
};


/**
 * optional bytes ed25519 = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEd25519()`
 * @return {!Uint8Array}
 */
proto.proto.SignaturePair.prototype.getEd25519_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEd25519()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.SignaturePair} returns this
 */
proto.proto.SignaturePair.prototype.setEd25519 = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.proto.SignaturePair.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.SignaturePair} returns this
 */
proto.proto.SignaturePair.prototype.clearEd25519 = function() {
  return jspb.Message.setOneofField(this, 3, proto.proto.SignaturePair.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.SignaturePair.prototype.hasEd25519 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes RSA_3072 = 4;
 * @return {!(string|Uint8Array)}
 */
proto.proto.SignaturePair.prototype.getRsa3072 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes RSA_3072 = 4;
 * This is a type-conversion wrapper around `getRsa3072()`
 * @return {string}
 */
proto.proto.SignaturePair.prototype.getRsa3072_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRsa3072()));
};


/**
 * optional bytes RSA_3072 = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRsa3072()`
 * @return {!Uint8Array}
 */
proto.proto.SignaturePair.prototype.getRsa3072_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRsa3072()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.SignaturePair} returns this
 */
proto.proto.SignaturePair.prototype.setRsa3072 = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.proto.SignaturePair.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.SignaturePair} returns this
 */
proto.proto.SignaturePair.prototype.clearRsa3072 = function() {
  return jspb.Message.setOneofField(this, 4, proto.proto.SignaturePair.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.SignaturePair.prototype.hasRsa3072 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes ECDSA_384 = 5;
 * @return {!(string|Uint8Array)}
 */
proto.proto.SignaturePair.prototype.getEcdsa384 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes ECDSA_384 = 5;
 * This is a type-conversion wrapper around `getEcdsa384()`
 * @return {string}
 */
proto.proto.SignaturePair.prototype.getEcdsa384_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEcdsa384()));
};


/**
 * optional bytes ECDSA_384 = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEcdsa384()`
 * @return {!Uint8Array}
 */
proto.proto.SignaturePair.prototype.getEcdsa384_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEcdsa384()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.SignaturePair} returns this
 */
proto.proto.SignaturePair.prototype.setEcdsa384 = function(value) {
  return jspb.Message.setOneofField(this, 5, proto.proto.SignaturePair.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.proto.SignaturePair} returns this
 */
proto.proto.SignaturePair.prototype.clearEcdsa384 = function() {
  return jspb.Message.setOneofField(this, 5, proto.proto.SignaturePair.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.SignaturePair.prototype.hasEcdsa384 = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.SignatureMap.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SignatureMap.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SignatureMap.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SignatureMap} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SignatureMap.toObject = function(includeInstance, msg) {
  var f, obj = {
    sigpairList: jspb.Message.toObjectList(msg.getSigpairList(),
    proto.proto.SignaturePair.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SignatureMap}
 */
proto.proto.SignatureMap.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SignatureMap;
  return proto.proto.SignatureMap.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SignatureMap} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SignatureMap}
 */
proto.proto.SignatureMap.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.SignaturePair;
      reader.readMessage(value,proto.proto.SignaturePair.deserializeBinaryFromReader);
      msg.addSigpair(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SignatureMap.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SignatureMap.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SignatureMap} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SignatureMap.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSigpairList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.SignaturePair.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SignaturePair sigPair = 1;
 * @return {!Array<!proto.proto.SignaturePair>}
 */
proto.proto.SignatureMap.prototype.getSigpairList = function() {
  return /** @type{!Array<!proto.proto.SignaturePair>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.SignaturePair, 1));
};


/**
 * @param {!Array<!proto.proto.SignaturePair>} value
 * @return {!proto.proto.SignatureMap} returns this
*/
proto.proto.SignatureMap.prototype.setSigpairList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.SignaturePair=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.SignaturePair}
 */
proto.proto.SignatureMap.prototype.addSigpair = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.SignaturePair, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.SignatureMap} returns this
 */
proto.proto.SignatureMap.prototype.clearSigpairList = function() {
  return this.setSigpairList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FeeComponents.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FeeComponents.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FeeComponents} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FeeComponents.toObject = function(includeInstance, msg) {
  var f, obj = {
    min: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    max: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    constant: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    bpt: jspb.Message.getFieldWithDefault(msg, 4, "0"),
    vpt: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    rbh: jspb.Message.getFieldWithDefault(msg, 6, "0"),
    sbh: jspb.Message.getFieldWithDefault(msg, 7, "0"),
    gas: jspb.Message.getFieldWithDefault(msg, 8, "0"),
    tv: jspb.Message.getFieldWithDefault(msg, 9, "0"),
    bpr: jspb.Message.getFieldWithDefault(msg, 10, "0"),
    sbpr: jspb.Message.getFieldWithDefault(msg, 11, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FeeComponents}
 */
proto.proto.FeeComponents.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FeeComponents;
  return proto.proto.FeeComponents.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FeeComponents} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FeeComponents}
 */
proto.proto.FeeComponents.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setMin(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setMax(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setConstant(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setBpt(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setVpt(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setRbh(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setSbh(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setGas(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTv(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setBpr(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setSbpr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FeeComponents.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FeeComponents.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FeeComponents} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FeeComponents.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMin();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getMax();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getConstant();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = message.getBpt();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      4,
      f
    );
  }
  f = message.getVpt();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      5,
      f
    );
  }
  f = message.getRbh();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      6,
      f
    );
  }
  f = message.getSbh();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      7,
      f
    );
  }
  f = message.getGas();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      8,
      f
    );
  }
  f = message.getTv();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      9,
      f
    );
  }
  f = message.getBpr();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      10,
      f
    );
  }
  f = message.getSbpr();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      11,
      f
    );
  }
};


/**
 * optional int64 min = 1;
 * @return {string}
 */
proto.proto.FeeComponents.prototype.getMin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/**
 * @param {string} value
 * @return {!proto.proto.FeeComponents} returns this
 */
proto.proto.FeeComponents.prototype.setMin = function(value) {
  return jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional int64 max = 2;
 * @return {string}
 */
proto.proto.FeeComponents.prototype.getMax = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/**
 * @param {string} value
 * @return {!proto.proto.FeeComponents} returns this
 */
proto.proto.FeeComponents.prototype.setMax = function(value) {
  return jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional int64 constant = 3;
 * @return {string}
 */
proto.proto.FeeComponents.prototype.getConstant = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.proto.FeeComponents} returns this
 */
proto.proto.FeeComponents.prototype.setConstant = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional int64 bpt = 4;
 * @return {string}
 */
proto.proto.FeeComponents.prototype.getBpt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/**
 * @param {string} value
 * @return {!proto.proto.FeeComponents} returns this
 */
proto.proto.FeeComponents.prototype.setBpt = function(value) {
  return jspb.Message.setProto3StringIntField(this, 4, value);
};


/**
 * optional int64 vpt = 5;
 * @return {string}
 */
proto.proto.FeeComponents.prototype.getVpt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.proto.FeeComponents} returns this
 */
proto.proto.FeeComponents.prototype.setVpt = function(value) {
  return jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional int64 rbh = 6;
 * @return {string}
 */
proto.proto.FeeComponents.prototype.getRbh = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/**
 * @param {string} value
 * @return {!proto.proto.FeeComponents} returns this
 */
proto.proto.FeeComponents.prototype.setRbh = function(value) {
  return jspb.Message.setProto3StringIntField(this, 6, value);
};


/**
 * optional int64 sbh = 7;
 * @return {string}
 */
proto.proto.FeeComponents.prototype.getSbh = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, "0"));
};


/**
 * @param {string} value
 * @return {!proto.proto.FeeComponents} returns this
 */
proto.proto.FeeComponents.prototype.setSbh = function(value) {
  return jspb.Message.setProto3StringIntField(this, 7, value);
};


/**
 * optional int64 gas = 8;
 * @return {string}
 */
proto.proto.FeeComponents.prototype.getGas = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, "0"));
};


/**
 * @param {string} value
 * @return {!proto.proto.FeeComponents} returns this
 */
proto.proto.FeeComponents.prototype.setGas = function(value) {
  return jspb.Message.setProto3StringIntField(this, 8, value);
};


/**
 * optional int64 tv = 9;
 * @return {string}
 */
proto.proto.FeeComponents.prototype.getTv = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, "0"));
};


/**
 * @param {string} value
 * @return {!proto.proto.FeeComponents} returns this
 */
proto.proto.FeeComponents.prototype.setTv = function(value) {
  return jspb.Message.setProto3StringIntField(this, 9, value);
};


/**
 * optional int64 bpr = 10;
 * @return {string}
 */
proto.proto.FeeComponents.prototype.getBpr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, "0"));
};


/**
 * @param {string} value
 * @return {!proto.proto.FeeComponents} returns this
 */
proto.proto.FeeComponents.prototype.setBpr = function(value) {
  return jspb.Message.setProto3StringIntField(this, 10, value);
};


/**
 * optional int64 sbpr = 11;
 * @return {string}
 */
proto.proto.FeeComponents.prototype.getSbpr = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, "0"));
};


/**
 * @param {string} value
 * @return {!proto.proto.FeeComponents} returns this
 */
proto.proto.FeeComponents.prototype.setSbpr = function(value) {
  return jspb.Message.setProto3StringIntField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TransactionFeeSchedule.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TransactionFeeSchedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TransactionFeeSchedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TransactionFeeSchedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    hederafunctionality: jspb.Message.getFieldWithDefault(msg, 1, 0),
    feedata: (f = msg.getFeedata()) && proto.proto.FeeData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TransactionFeeSchedule}
 */
proto.proto.TransactionFeeSchedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TransactionFeeSchedule;
  return proto.proto.TransactionFeeSchedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TransactionFeeSchedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TransactionFeeSchedule}
 */
proto.proto.TransactionFeeSchedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proto.HederaFunctionality} */ (reader.readEnum());
      msg.setHederafunctionality(value);
      break;
    case 2:
      var value = new proto.proto.FeeData;
      reader.readMessage(value,proto.proto.FeeData.deserializeBinaryFromReader);
      msg.setFeedata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TransactionFeeSchedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TransactionFeeSchedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TransactionFeeSchedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TransactionFeeSchedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHederafunctionality();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getFeedata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.FeeData.serializeBinaryToWriter
    );
  }
};


/**
 * optional HederaFunctionality hederaFunctionality = 1;
 * @return {!proto.proto.HederaFunctionality}
 */
proto.proto.TransactionFeeSchedule.prototype.getHederafunctionality = function() {
  return /** @type {!proto.proto.HederaFunctionality} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.proto.HederaFunctionality} value
 * @return {!proto.proto.TransactionFeeSchedule} returns this
 */
proto.proto.TransactionFeeSchedule.prototype.setHederafunctionality = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional FeeData feeData = 2;
 * @return {?proto.proto.FeeData}
 */
proto.proto.TransactionFeeSchedule.prototype.getFeedata = function() {
  return /** @type{?proto.proto.FeeData} */ (
    jspb.Message.getWrapperField(this, proto.proto.FeeData, 2));
};


/**
 * @param {?proto.proto.FeeData|undefined} value
 * @return {!proto.proto.TransactionFeeSchedule} returns this
*/
proto.proto.TransactionFeeSchedule.prototype.setFeedata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.TransactionFeeSchedule} returns this
 */
proto.proto.TransactionFeeSchedule.prototype.clearFeedata = function() {
  return this.setFeedata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TransactionFeeSchedule.prototype.hasFeedata = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FeeData.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FeeData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FeeData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FeeData.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodedata: (f = msg.getNodedata()) && proto.proto.FeeComponents.toObject(includeInstance, f),
    networkdata: (f = msg.getNetworkdata()) && proto.proto.FeeComponents.toObject(includeInstance, f),
    servicedata: (f = msg.getServicedata()) && proto.proto.FeeComponents.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FeeData}
 */
proto.proto.FeeData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FeeData;
  return proto.proto.FeeData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FeeData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FeeData}
 */
proto.proto.FeeData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.FeeComponents;
      reader.readMessage(value,proto.proto.FeeComponents.deserializeBinaryFromReader);
      msg.setNodedata(value);
      break;
    case 2:
      var value = new proto.proto.FeeComponents;
      reader.readMessage(value,proto.proto.FeeComponents.deserializeBinaryFromReader);
      msg.setNetworkdata(value);
      break;
    case 3:
      var value = new proto.proto.FeeComponents;
      reader.readMessage(value,proto.proto.FeeComponents.deserializeBinaryFromReader);
      msg.setServicedata(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FeeData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FeeData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FeeData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FeeData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodedata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.FeeComponents.serializeBinaryToWriter
    );
  }
  f = message.getNetworkdata();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.FeeComponents.serializeBinaryToWriter
    );
  }
  f = message.getServicedata();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.proto.FeeComponents.serializeBinaryToWriter
    );
  }
};


/**
 * optional FeeComponents nodedata = 1;
 * @return {?proto.proto.FeeComponents}
 */
proto.proto.FeeData.prototype.getNodedata = function() {
  return /** @type{?proto.proto.FeeComponents} */ (
    jspb.Message.getWrapperField(this, proto.proto.FeeComponents, 1));
};


/**
 * @param {?proto.proto.FeeComponents|undefined} value
 * @return {!proto.proto.FeeData} returns this
*/
proto.proto.FeeData.prototype.setNodedata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FeeData} returns this
 */
proto.proto.FeeData.prototype.clearNodedata = function() {
  return this.setNodedata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FeeData.prototype.hasNodedata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FeeComponents networkdata = 2;
 * @return {?proto.proto.FeeComponents}
 */
proto.proto.FeeData.prototype.getNetworkdata = function() {
  return /** @type{?proto.proto.FeeComponents} */ (
    jspb.Message.getWrapperField(this, proto.proto.FeeComponents, 2));
};


/**
 * @param {?proto.proto.FeeComponents|undefined} value
 * @return {!proto.proto.FeeData} returns this
*/
proto.proto.FeeData.prototype.setNetworkdata = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FeeData} returns this
 */
proto.proto.FeeData.prototype.clearNetworkdata = function() {
  return this.setNetworkdata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FeeData.prototype.hasNetworkdata = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional FeeComponents servicedata = 3;
 * @return {?proto.proto.FeeComponents}
 */
proto.proto.FeeData.prototype.getServicedata = function() {
  return /** @type{?proto.proto.FeeComponents} */ (
    jspb.Message.getWrapperField(this, proto.proto.FeeComponents, 3));
};


/**
 * @param {?proto.proto.FeeComponents|undefined} value
 * @return {!proto.proto.FeeData} returns this
*/
proto.proto.FeeData.prototype.setServicedata = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FeeData} returns this
 */
proto.proto.FeeData.prototype.clearServicedata = function() {
  return this.setServicedata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FeeData.prototype.hasServicedata = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.FeeSchedule.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.FeeSchedule.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.FeeSchedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.FeeSchedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FeeSchedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionfeescheduleList: jspb.Message.toObjectList(msg.getTransactionfeescheduleList(),
    proto.proto.TransactionFeeSchedule.toObject, includeInstance),
    expirytime: (f = msg.getExpirytime()) && Timestamp_pb.TimestampSeconds.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.FeeSchedule}
 */
proto.proto.FeeSchedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.FeeSchedule;
  return proto.proto.FeeSchedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.FeeSchedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.FeeSchedule}
 */
proto.proto.FeeSchedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.TransactionFeeSchedule;
      reader.readMessage(value,proto.proto.TransactionFeeSchedule.deserializeBinaryFromReader);
      msg.addTransactionfeeschedule(value);
      break;
    case 2:
      var value = new Timestamp_pb.TimestampSeconds;
      reader.readMessage(value,Timestamp_pb.TimestampSeconds.deserializeBinaryFromReader);
      msg.setExpirytime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.FeeSchedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.FeeSchedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.FeeSchedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.FeeSchedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionfeescheduleList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.TransactionFeeSchedule.serializeBinaryToWriter
    );
  }
  f = message.getExpirytime();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      Timestamp_pb.TimestampSeconds.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TransactionFeeSchedule transactionFeeSchedule = 1;
 * @return {!Array<!proto.proto.TransactionFeeSchedule>}
 */
proto.proto.FeeSchedule.prototype.getTransactionfeescheduleList = function() {
  return /** @type{!Array<!proto.proto.TransactionFeeSchedule>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.TransactionFeeSchedule, 1));
};


/**
 * @param {!Array<!proto.proto.TransactionFeeSchedule>} value
 * @return {!proto.proto.FeeSchedule} returns this
*/
proto.proto.FeeSchedule.prototype.setTransactionfeescheduleList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.TransactionFeeSchedule=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.TransactionFeeSchedule}
 */
proto.proto.FeeSchedule.prototype.addTransactionfeeschedule = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.TransactionFeeSchedule, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.FeeSchedule} returns this
 */
proto.proto.FeeSchedule.prototype.clearTransactionfeescheduleList = function() {
  return this.setTransactionfeescheduleList([]);
};


/**
 * optional TimestampSeconds expiryTime = 2;
 * @return {?proto.proto.TimestampSeconds}
 */
proto.proto.FeeSchedule.prototype.getExpirytime = function() {
  return /** @type{?proto.proto.TimestampSeconds} */ (
    jspb.Message.getWrapperField(this, Timestamp_pb.TimestampSeconds, 2));
};


/**
 * @param {?proto.proto.TimestampSeconds|undefined} value
 * @return {!proto.proto.FeeSchedule} returns this
*/
proto.proto.FeeSchedule.prototype.setExpirytime = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.FeeSchedule} returns this
 */
proto.proto.FeeSchedule.prototype.clearExpirytime = function() {
  return this.setExpirytime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.FeeSchedule.prototype.hasExpirytime = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.CurrentAndNextFeeSchedule.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.CurrentAndNextFeeSchedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.CurrentAndNextFeeSchedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CurrentAndNextFeeSchedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentfeeschedule: (f = msg.getCurrentfeeschedule()) && proto.proto.FeeSchedule.toObject(includeInstance, f),
    nextfeeschedule: (f = msg.getNextfeeschedule()) && proto.proto.FeeSchedule.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.CurrentAndNextFeeSchedule}
 */
proto.proto.CurrentAndNextFeeSchedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.CurrentAndNextFeeSchedule;
  return proto.proto.CurrentAndNextFeeSchedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.CurrentAndNextFeeSchedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.CurrentAndNextFeeSchedule}
 */
proto.proto.CurrentAndNextFeeSchedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.FeeSchedule;
      reader.readMessage(value,proto.proto.FeeSchedule.deserializeBinaryFromReader);
      msg.setCurrentfeeschedule(value);
      break;
    case 2:
      var value = new proto.proto.FeeSchedule;
      reader.readMessage(value,proto.proto.FeeSchedule.deserializeBinaryFromReader);
      msg.setNextfeeschedule(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.CurrentAndNextFeeSchedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.CurrentAndNextFeeSchedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.CurrentAndNextFeeSchedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.CurrentAndNextFeeSchedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentfeeschedule();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.FeeSchedule.serializeBinaryToWriter
    );
  }
  f = message.getNextfeeschedule();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.proto.FeeSchedule.serializeBinaryToWriter
    );
  }
};


/**
 * optional FeeSchedule currentFeeSchedule = 1;
 * @return {?proto.proto.FeeSchedule}
 */
proto.proto.CurrentAndNextFeeSchedule.prototype.getCurrentfeeschedule = function() {
  return /** @type{?proto.proto.FeeSchedule} */ (
    jspb.Message.getWrapperField(this, proto.proto.FeeSchedule, 1));
};


/**
 * @param {?proto.proto.FeeSchedule|undefined} value
 * @return {!proto.proto.CurrentAndNextFeeSchedule} returns this
*/
proto.proto.CurrentAndNextFeeSchedule.prototype.setCurrentfeeschedule = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.CurrentAndNextFeeSchedule} returns this
 */
proto.proto.CurrentAndNextFeeSchedule.prototype.clearCurrentfeeschedule = function() {
  return this.setCurrentfeeschedule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CurrentAndNextFeeSchedule.prototype.hasCurrentfeeschedule = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional FeeSchedule nextFeeSchedule = 2;
 * @return {?proto.proto.FeeSchedule}
 */
proto.proto.CurrentAndNextFeeSchedule.prototype.getNextfeeschedule = function() {
  return /** @type{?proto.proto.FeeSchedule} */ (
    jspb.Message.getWrapperField(this, proto.proto.FeeSchedule, 2));
};


/**
 * @param {?proto.proto.FeeSchedule|undefined} value
 * @return {!proto.proto.CurrentAndNextFeeSchedule} returns this
*/
proto.proto.CurrentAndNextFeeSchedule.prototype.setNextfeeschedule = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.CurrentAndNextFeeSchedule} returns this
 */
proto.proto.CurrentAndNextFeeSchedule.prototype.clearNextfeeschedule = function() {
  return this.setNextfeeschedule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.CurrentAndNextFeeSchedule.prototype.hasNextfeeschedule = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ServiceEndpoint.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ServiceEndpoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ServiceEndpoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ServiceEndpoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    ipaddressv4: msg.getIpaddressv4_asB64(),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ServiceEndpoint}
 */
proto.proto.ServiceEndpoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ServiceEndpoint;
  return proto.proto.ServiceEndpoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ServiceEndpoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ServiceEndpoint}
 */
proto.proto.ServiceEndpoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIpaddressv4(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ServiceEndpoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ServiceEndpoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ServiceEndpoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ServiceEndpoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIpaddressv4_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional bytes ipAddressV4 = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.ServiceEndpoint.prototype.getIpaddressv4 = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ipAddressV4 = 1;
 * This is a type-conversion wrapper around `getIpaddressv4()`
 * @return {string}
 */
proto.proto.ServiceEndpoint.prototype.getIpaddressv4_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIpaddressv4()));
};


/**
 * optional bytes ipAddressV4 = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIpaddressv4()`
 * @return {!Uint8Array}
 */
proto.proto.ServiceEndpoint.prototype.getIpaddressv4_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIpaddressv4()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.ServiceEndpoint} returns this
 */
proto.proto.ServiceEndpoint.prototype.setIpaddressv4 = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 port = 2;
 * @return {number}
 */
proto.proto.ServiceEndpoint.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.ServiceEndpoint} returns this
 */
proto.proto.ServiceEndpoint.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.NodeAddress.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.NodeAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.NodeAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.NodeAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodeAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    ipaddress: msg.getIpaddress_asB64(),
    portno: jspb.Message.getFieldWithDefault(msg, 2, 0),
    memo: msg.getMemo_asB64(),
    rsaPubkey: jspb.Message.getFieldWithDefault(msg, 4, ""),
    nodeid: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    nodeaccountid: (f = msg.getNodeaccountid()) && proto.proto.AccountID.toObject(includeInstance, f),
    nodecerthash: msg.getNodecerthash_asB64(),
    serviceendpointList: jspb.Message.toObjectList(msg.getServiceendpointList(),
    proto.proto.ServiceEndpoint.toObject, includeInstance),
    description: jspb.Message.getFieldWithDefault(msg, 9, ""),
    stake: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.NodeAddress}
 */
proto.proto.NodeAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.NodeAddress;
  return proto.proto.NodeAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.NodeAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.NodeAddress}
 */
proto.proto.NodeAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setIpaddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPortno(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMemo(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRsaPubkey(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setNodeid(value);
      break;
    case 6:
      var value = new proto.proto.AccountID;
      reader.readMessage(value,proto.proto.AccountID.deserializeBinaryFromReader);
      msg.setNodeaccountid(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodecerthash(value);
      break;
    case 8:
      var value = new proto.proto.ServiceEndpoint;
      reader.readMessage(value,proto.proto.ServiceEndpoint.deserializeBinaryFromReader);
      msg.addServiceendpoint(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStake(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.NodeAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.NodeAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.NodeAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodeAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIpaddress_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPortno();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getMemo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getRsaPubkey();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNodeid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      5,
      f
    );
  }
  f = message.getNodeaccountid();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.proto.AccountID.serializeBinaryToWriter
    );
  }
  f = message.getNodecerthash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getServiceendpointList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.proto.ServiceEndpoint.serializeBinaryToWriter
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getStake();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
};


/**
 * optional bytes ipAddress = 1;
 * @return {!(string|Uint8Array)}
 */
proto.proto.NodeAddress.prototype.getIpaddress = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ipAddress = 1;
 * This is a type-conversion wrapper around `getIpaddress()`
 * @return {string}
 */
proto.proto.NodeAddress.prototype.getIpaddress_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getIpaddress()));
};


/**
 * optional bytes ipAddress = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getIpaddress()`
 * @return {!Uint8Array}
 */
proto.proto.NodeAddress.prototype.getIpaddress_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getIpaddress()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.NodeAddress} returns this
 */
proto.proto.NodeAddress.prototype.setIpaddress = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int32 portno = 2;
 * @return {number}
 */
proto.proto.NodeAddress.prototype.getPortno = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.NodeAddress} returns this
 */
proto.proto.NodeAddress.prototype.setPortno = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes memo = 3;
 * @return {!(string|Uint8Array)}
 */
proto.proto.NodeAddress.prototype.getMemo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes memo = 3;
 * This is a type-conversion wrapper around `getMemo()`
 * @return {string}
 */
proto.proto.NodeAddress.prototype.getMemo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMemo()));
};


/**
 * optional bytes memo = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMemo()`
 * @return {!Uint8Array}
 */
proto.proto.NodeAddress.prototype.getMemo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMemo()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.NodeAddress} returns this
 */
proto.proto.NodeAddress.prototype.setMemo = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string RSA_PubKey = 4;
 * @return {string}
 */
proto.proto.NodeAddress.prototype.getRsaPubkey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeAddress} returns this
 */
proto.proto.NodeAddress.prototype.setRsaPubkey = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 nodeId = 5;
 * @return {string}
 */
proto.proto.NodeAddress.prototype.getNodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeAddress} returns this
 */
proto.proto.NodeAddress.prototype.setNodeid = function(value) {
  return jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional AccountID nodeAccountId = 6;
 * @return {?proto.proto.AccountID}
 */
proto.proto.NodeAddress.prototype.getNodeaccountid = function() {
  return /** @type{?proto.proto.AccountID} */ (
    jspb.Message.getWrapperField(this, proto.proto.AccountID, 6));
};


/**
 * @param {?proto.proto.AccountID|undefined} value
 * @return {!proto.proto.NodeAddress} returns this
*/
proto.proto.NodeAddress.prototype.setNodeaccountid = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.NodeAddress} returns this
 */
proto.proto.NodeAddress.prototype.clearNodeaccountid = function() {
  return this.setNodeaccountid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.NodeAddress.prototype.hasNodeaccountid = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes nodeCertHash = 7;
 * @return {!(string|Uint8Array)}
 */
proto.proto.NodeAddress.prototype.getNodecerthash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes nodeCertHash = 7;
 * This is a type-conversion wrapper around `getNodecerthash()`
 * @return {string}
 */
proto.proto.NodeAddress.prototype.getNodecerthash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodecerthash()));
};


/**
 * optional bytes nodeCertHash = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodecerthash()`
 * @return {!Uint8Array}
 */
proto.proto.NodeAddress.prototype.getNodecerthash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodecerthash()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.NodeAddress} returns this
 */
proto.proto.NodeAddress.prototype.setNodecerthash = function(value) {
  return jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * repeated ServiceEndpoint serviceEndpoint = 8;
 * @return {!Array<!proto.proto.ServiceEndpoint>}
 */
proto.proto.NodeAddress.prototype.getServiceendpointList = function() {
  return /** @type{!Array<!proto.proto.ServiceEndpoint>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.ServiceEndpoint, 8));
};


/**
 * @param {!Array<!proto.proto.ServiceEndpoint>} value
 * @return {!proto.proto.NodeAddress} returns this
*/
proto.proto.NodeAddress.prototype.setServiceendpointList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.proto.ServiceEndpoint=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.ServiceEndpoint}
 */
proto.proto.NodeAddress.prototype.addServiceendpoint = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.proto.ServiceEndpoint, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.NodeAddress} returns this
 */
proto.proto.NodeAddress.prototype.clearServiceendpointList = function() {
  return this.setServiceendpointList([]);
};


/**
 * optional string description = 9;
 * @return {string}
 */
proto.proto.NodeAddress.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.NodeAddress} returns this
 */
proto.proto.NodeAddress.prototype.setDescription = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int64 stake = 10;
 * @return {number}
 */
proto.proto.NodeAddress.prototype.getStake = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.NodeAddress} returns this
 */
proto.proto.NodeAddress.prototype.setStake = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.NodeAddressBook.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.NodeAddressBook.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.NodeAddressBook.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.NodeAddressBook} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodeAddressBook.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeaddressList: jspb.Message.toObjectList(msg.getNodeaddressList(),
    proto.proto.NodeAddress.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.NodeAddressBook}
 */
proto.proto.NodeAddressBook.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.NodeAddressBook;
  return proto.proto.NodeAddressBook.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.NodeAddressBook} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.NodeAddressBook}
 */
proto.proto.NodeAddressBook.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.NodeAddress;
      reader.readMessage(value,proto.proto.NodeAddress.deserializeBinaryFromReader);
      msg.addNodeaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.NodeAddressBook.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.NodeAddressBook.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.NodeAddressBook} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.NodeAddressBook.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeaddressList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.NodeAddress.serializeBinaryToWriter
    );
  }
};


/**
 * repeated NodeAddress nodeAddress = 1;
 * @return {!Array<!proto.proto.NodeAddress>}
 */
proto.proto.NodeAddressBook.prototype.getNodeaddressList = function() {
  return /** @type{!Array<!proto.proto.NodeAddress>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.NodeAddress, 1));
};


/**
 * @param {!Array<!proto.proto.NodeAddress>} value
 * @return {!proto.proto.NodeAddressBook} returns this
*/
proto.proto.NodeAddressBook.prototype.setNodeaddressList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.NodeAddress=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.NodeAddress}
 */
proto.proto.NodeAddressBook.prototype.addNodeaddress = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.NodeAddress, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.NodeAddressBook} returns this
 */
proto.proto.NodeAddressBook.prototype.clearNodeaddressList = function() {
  return this.setNodeaddressList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.SemanticVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.SemanticVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.SemanticVersion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SemanticVersion.toObject = function(includeInstance, msg) {
  var f, obj = {
    major: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minor: jspb.Message.getFieldWithDefault(msg, 2, 0),
    patch: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.SemanticVersion}
 */
proto.proto.SemanticVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.SemanticVersion;
  return proto.proto.SemanticVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.SemanticVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.SemanticVersion}
 */
proto.proto.SemanticVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMajor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMinor(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPatch(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.SemanticVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.SemanticVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.SemanticVersion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.SemanticVersion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMajor();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getMinor();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPatch();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional int32 major = 1;
 * @return {number}
 */
proto.proto.SemanticVersion.prototype.getMajor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SemanticVersion} returns this
 */
proto.proto.SemanticVersion.prototype.setMajor = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 minor = 2;
 * @return {number}
 */
proto.proto.SemanticVersion.prototype.getMinor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SemanticVersion} returns this
 */
proto.proto.SemanticVersion.prototype.setMinor = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 patch = 3;
 * @return {number}
 */
proto.proto.SemanticVersion.prototype.getPatch = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.SemanticVersion} returns this
 */
proto.proto.SemanticVersion.prototype.setPatch = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Setting.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Setting.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Setting} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Setting.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    value: jspb.Message.getFieldWithDefault(msg, 2, ""),
    data: msg.getData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Setting}
 */
proto.proto.Setting.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Setting;
  return proto.proto.Setting.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Setting} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Setting}
 */
proto.proto.Setting.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Setting.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Setting.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Setting} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Setting.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.proto.Setting.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Setting} returns this
 */
proto.proto.Setting.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string value = 2;
 * @return {string}
 */
proto.proto.Setting.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.Setting} returns this
 */
proto.proto.Setting.prototype.setValue = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Setting.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.proto.Setting.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.proto.Setting.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.Setting} returns this
 */
proto.proto.Setting.prototype.setData = function(value) {
  return jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.ServicesConfigurationList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.ServicesConfigurationList.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.ServicesConfigurationList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.ServicesConfigurationList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ServicesConfigurationList.toObject = function(includeInstance, msg) {
  var f, obj = {
    namevalueList: jspb.Message.toObjectList(msg.getNamevalueList(),
    proto.proto.Setting.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.ServicesConfigurationList}
 */
proto.proto.ServicesConfigurationList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.ServicesConfigurationList;
  return proto.proto.ServicesConfigurationList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.ServicesConfigurationList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.ServicesConfigurationList}
 */
proto.proto.ServicesConfigurationList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.Setting;
      reader.readMessage(value,proto.proto.Setting.deserializeBinaryFromReader);
      msg.addNamevalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.ServicesConfigurationList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.ServicesConfigurationList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.ServicesConfigurationList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.ServicesConfigurationList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNamevalueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.Setting.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Setting nameValue = 1;
 * @return {!Array<!proto.proto.Setting>}
 */
proto.proto.ServicesConfigurationList.prototype.getNamevalueList = function() {
  return /** @type{!Array<!proto.proto.Setting>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.Setting, 1));
};


/**
 * @param {!Array<!proto.proto.Setting>} value
 * @return {!proto.proto.ServicesConfigurationList} returns this
*/
proto.proto.ServicesConfigurationList.prototype.setNamevalueList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.Setting=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.Setting}
 */
proto.proto.ServicesConfigurationList.prototype.addNamevalue = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.Setting, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.ServicesConfigurationList} returns this
 */
proto.proto.ServicesConfigurationList.prototype.clearNamevalueList = function() {
  return this.setNamevalueList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TokenRelationship.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TokenRelationship.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TokenRelationship} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenRelationship.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenid: (f = msg.getTokenid()) && proto.proto.TokenID.toObject(includeInstance, f),
    symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
    balance: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    kycstatus: jspb.Message.getFieldWithDefault(msg, 4, 0),
    freezestatus: jspb.Message.getFieldWithDefault(msg, 5, 0),
    decimals: jspb.Message.getFieldWithDefault(msg, 6, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TokenRelationship}
 */
proto.proto.TokenRelationship.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TokenRelationship;
  return proto.proto.TokenRelationship.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TokenRelationship} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TokenRelationship}
 */
proto.proto.TokenRelationship.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.TokenID;
      reader.readMessage(value,proto.proto.TokenID.deserializeBinaryFromReader);
      msg.setTokenid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setBalance(value);
      break;
    case 4:
      var value = /** @type {!proto.proto.TokenKycStatus} */ (reader.readEnum());
      msg.setKycstatus(value);
      break;
    case 5:
      var value = /** @type {!proto.proto.TokenFreezeStatus} */ (reader.readEnum());
      msg.setFreezestatus(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecimals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TokenRelationship.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TokenRelationship.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TokenRelationship} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenRelationship.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.TokenID.serializeBinaryToWriter
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBalance();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      3,
      f
    );
  }
  f = message.getKycstatus();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getFreezestatus();
  if (f !== 0.0) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
};


/**
 * optional TokenID tokenId = 1;
 * @return {?proto.proto.TokenID}
 */
proto.proto.TokenRelationship.prototype.getTokenid = function() {
  return /** @type{?proto.proto.TokenID} */ (
    jspb.Message.getWrapperField(this, proto.proto.TokenID, 1));
};


/**
 * @param {?proto.proto.TokenID|undefined} value
 * @return {!proto.proto.TokenRelationship} returns this
*/
proto.proto.TokenRelationship.prototype.setTokenid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.TokenRelationship} returns this
 */
proto.proto.TokenRelationship.prototype.clearTokenid = function() {
  return this.setTokenid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TokenRelationship.prototype.hasTokenid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.proto.TokenRelationship.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.proto.TokenRelationship} returns this
 */
proto.proto.TokenRelationship.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 balance = 3;
 * @return {string}
 */
proto.proto.TokenRelationship.prototype.getBalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/**
 * @param {string} value
 * @return {!proto.proto.TokenRelationship} returns this
 */
proto.proto.TokenRelationship.prototype.setBalance = function(value) {
  return jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional TokenKycStatus kycStatus = 4;
 * @return {!proto.proto.TokenKycStatus}
 */
proto.proto.TokenRelationship.prototype.getKycstatus = function() {
  return /** @type {!proto.proto.TokenKycStatus} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {!proto.proto.TokenKycStatus} value
 * @return {!proto.proto.TokenRelationship} returns this
 */
proto.proto.TokenRelationship.prototype.setKycstatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional TokenFreezeStatus freezeStatus = 5;
 * @return {!proto.proto.TokenFreezeStatus}
 */
proto.proto.TokenRelationship.prototype.getFreezestatus = function() {
  return /** @type {!proto.proto.TokenFreezeStatus} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {!proto.proto.TokenFreezeStatus} value
 * @return {!proto.proto.TokenRelationship} returns this
 */
proto.proto.TokenRelationship.prototype.setFreezestatus = function(value) {
  return jspb.Message.setProto3EnumField(this, 5, value);
};


/**
 * optional uint32 decimals = 6;
 * @return {number}
 */
proto.proto.TokenRelationship.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.TokenRelationship} returns this
 */
proto.proto.TokenRelationship.prototype.setDecimals = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TokenBalance.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TokenBalance.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TokenBalance} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenBalance.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenid: (f = msg.getTokenid()) && proto.proto.TokenID.toObject(includeInstance, f),
    balance: jspb.Message.getFieldWithDefault(msg, 2, 0),
    decimals: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TokenBalance}
 */
proto.proto.TokenBalance.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TokenBalance;
  return proto.proto.TokenBalance.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TokenBalance} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TokenBalance}
 */
proto.proto.TokenBalance.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.TokenID;
      reader.readMessage(value,proto.proto.TokenID.deserializeBinaryFromReader);
      msg.setTokenid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBalance(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDecimals(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TokenBalance.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TokenBalance.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TokenBalance} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenBalance.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenid();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.proto.TokenID.serializeBinaryToWriter
    );
  }
  f = message.getBalance();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getDecimals();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional TokenID tokenId = 1;
 * @return {?proto.proto.TokenID}
 */
proto.proto.TokenBalance.prototype.getTokenid = function() {
  return /** @type{?proto.proto.TokenID} */ (
    jspb.Message.getWrapperField(this, proto.proto.TokenID, 1));
};


/**
 * @param {?proto.proto.TokenID|undefined} value
 * @return {!proto.proto.TokenBalance} returns this
*/
proto.proto.TokenBalance.prototype.setTokenid = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.TokenBalance} returns this
 */
proto.proto.TokenBalance.prototype.clearTokenid = function() {
  return this.setTokenid(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.TokenBalance.prototype.hasTokenid = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 balance = 2;
 * @return {number}
 */
proto.proto.TokenBalance.prototype.getBalance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.TokenBalance} returns this
 */
proto.proto.TokenBalance.prototype.setBalance = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 decimals = 3;
 * @return {number}
 */
proto.proto.TokenBalance.prototype.getDecimals = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.proto.TokenBalance} returns this
 */
proto.proto.TokenBalance.prototype.setDecimals = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.proto.TokenBalances.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.TokenBalances.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.TokenBalances.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.TokenBalances} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenBalances.toObject = function(includeInstance, msg) {
  var f, obj = {
    tokenbalancesList: jspb.Message.toObjectList(msg.getTokenbalancesList(),
    proto.proto.TokenBalance.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.TokenBalances}
 */
proto.proto.TokenBalances.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.TokenBalances;
  return proto.proto.TokenBalances.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.TokenBalances} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.TokenBalances}
 */
proto.proto.TokenBalances.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.proto.TokenBalance;
      reader.readMessage(value,proto.proto.TokenBalance.deserializeBinaryFromReader);
      msg.addTokenbalances(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.TokenBalances.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.TokenBalances.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.TokenBalances} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.TokenBalances.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTokenbalancesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.proto.TokenBalance.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TokenBalance tokenBalances = 1;
 * @return {!Array<!proto.proto.TokenBalance>}
 */
proto.proto.TokenBalances.prototype.getTokenbalancesList = function() {
  return /** @type{!Array<!proto.proto.TokenBalance>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.proto.TokenBalance, 1));
};


/**
 * @param {!Array<!proto.proto.TokenBalance>} value
 * @return {!proto.proto.TokenBalances} returns this
*/
proto.proto.TokenBalances.prototype.setTokenbalancesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.proto.TokenBalance=} opt_value
 * @param {number=} opt_index
 * @return {!proto.proto.TokenBalance}
 */
proto.proto.TokenBalances.prototype.addTokenbalances = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.proto.TokenBalance, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.proto.TokenBalances} returns this
 */
proto.proto.TokenBalances.prototype.clearTokenbalancesList = function() {
  return this.setTokenbalancesList([]);
};


/**
 * @enum {number}
 */
proto.proto.TokenFreezeStatus = {
  FREEZENOTAPPLICABLE: 0,
  FROZEN: 1,
  UNFROZEN: 2
};

/**
 * @enum {number}
 */
proto.proto.TokenKycStatus = {
  KYCNOTAPPLICABLE: 0,
  GRANTED: 1,
  REVOKED: 2
};

/**
 * @enum {number}
 */
proto.proto.HederaFunctionality = {
  NONE: 0,
  CRYPTOTRANSFER: 1,
  CRYPTOUPDATE: 2,
  CRYPTODELETE: 3,
  CRYPTOADDLIVEHASH: 4,
  CRYPTODELETELIVEHASH: 5,
  CONTRACTCALL: 6,
  CONTRACTCREATE: 7,
  CONTRACTUPDATE: 8,
  FILECREATE: 9,
  FILEAPPEND: 10,
  FILEUPDATE: 11,
  FILEDELETE: 12,
  CRYPTOGETACCOUNTBALANCE: 13,
  CRYPTOGETACCOUNTRECORDS: 14,
  CRYPTOGETINFO: 15,
  CONTRACTCALLLOCAL: 16,
  CONTRACTGETINFO: 17,
  CONTRACTGETBYTECODE: 18,
  GETBYSOLIDITYID: 19,
  GETBYKEY: 20,
  CRYPTOGETLIVEHASH: 21,
  CRYPTOGETSTAKERS: 22,
  FILEGETCONTENTS: 23,
  FILEGETINFO: 24,
  TRANSACTIONGETRECORD: 25,
  CONTRACTGETRECORDS: 26,
  CRYPTOCREATE: 27,
  SYSTEMDELETE: 28,
  SYSTEMUNDELETE: 29,
  CONTRACTDELETE: 30,
  FREEZE: 31,
  CREATETRANSACTIONRECORD: 32,
  CRYPTOACCOUNTAUTORENEW: 33,
  CONTRACTAUTORENEW: 34,
  GETVERSIONINFO: 35,
  TRANSACTIONGETRECEIPT: 36,
  CONSENSUSCREATETOPIC: 50,
  CONSENSUSUPDATETOPIC: 51,
  CONSENSUSDELETETOPIC: 52,
  CONSENSUSGETTOPICINFO: 53,
  CONSENSUSSUBMITMESSAGE: 54,
  UNCHECKEDSUBMIT: 55,
  TOKENCREATE: 56,
  TOKENGETINFO: 58,
  TOKENFREEZEACCOUNT: 59,
  TOKENUNFREEZEACCOUNT: 60,
  TOKENGRANTKYCTOACCOUNT: 61,
  TOKENREVOKEKYCFROMACCOUNT: 62,
  TOKENDELETE: 63,
  TOKENUPDATE: 64,
  TOKENMINT: 65,
  TOKENBURN: 66,
  TOKENACCOUNTWIPE: 67,
  TOKENASSOCIATETOACCOUNT: 68,
  TOKENDISSOCIATEFROMACCOUNT: 69,
  SCHEDULECREATE: 70,
  SCHEDULEDELETE: 71,
  SCHEDULESIGN: 72,
  SCHEDULEGETINFO: 73
};

goog.object.extend(exports, proto.proto);
