// source: Transaction.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var Duration_pb = require('./Duration_pb.js');
goog.object.extend(proto, Duration_pb);
var BasicTypes_pb = require('./BasicTypes_pb.js');
goog.object.extend(proto, BasicTypes_pb);
goog.exportSymbol('proto.proto.Transaction', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proto.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proto.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.proto.Transaction.displayName = 'proto.proto.Transaction';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proto.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.proto.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proto.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    sigmap: (f = msg.getSigmap()) && BasicTypes_pb.SignatureMap.toObject(includeInstance, f),
    bodybytes: msg.getBodybytes_asB64(),
    signedtransactionbytes: msg.getSignedtransactionbytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proto.Transaction}
 */
proto.proto.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proto.Transaction;
  return proto.proto.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proto.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proto.Transaction}
 */
proto.proto.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 3:
      var value = new BasicTypes_pb.SignatureMap;
      reader.readMessage(value,BasicTypes_pb.SignatureMap.deserializeBinaryFromReader);
      msg.setSigmap(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBodybytes(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignedtransactionbytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proto.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proto.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proto.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proto.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSigmap();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      BasicTypes_pb.SignatureMap.serializeBinaryToWriter
    );
  }
  f = message.getBodybytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getSignedtransactionbytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * optional SignatureMap sigMap = 3;
 * @return {?proto.proto.SignatureMap}
 */
proto.proto.Transaction.prototype.getSigmap = function() {
  return /** @type{?proto.proto.SignatureMap} */ (
    jspb.Message.getWrapperField(this, BasicTypes_pb.SignatureMap, 3));
};


/**
 * @param {?proto.proto.SignatureMap|undefined} value
 * @return {!proto.proto.Transaction} returns this
*/
proto.proto.Transaction.prototype.setSigmap = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.proto.Transaction} returns this
 */
proto.proto.Transaction.prototype.clearSigmap = function() {
  return this.setSigmap(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.proto.Transaction.prototype.hasSigmap = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes bodyBytes = 4;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Transaction.prototype.getBodybytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes bodyBytes = 4;
 * This is a type-conversion wrapper around `getBodybytes()`
 * @return {string}
 */
proto.proto.Transaction.prototype.getBodybytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBodybytes()));
};


/**
 * optional bytes bodyBytes = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBodybytes()`
 * @return {!Uint8Array}
 */
proto.proto.Transaction.prototype.getBodybytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBodybytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.Transaction} returns this
 */
proto.proto.Transaction.prototype.setBodybytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional bytes signedTransactionBytes = 5;
 * @return {!(string|Uint8Array)}
 */
proto.proto.Transaction.prototype.getSignedtransactionbytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes signedTransactionBytes = 5;
 * This is a type-conversion wrapper around `getSignedtransactionbytes()`
 * @return {string}
 */
proto.proto.Transaction.prototype.getSignedtransactionbytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignedtransactionbytes()));
};


/**
 * optional bytes signedTransactionBytes = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignedtransactionbytes()`
 * @return {!Uint8Array}
 */
proto.proto.Transaction.prototype.getSignedtransactionbytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignedtransactionbytes()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.proto.Transaction} returns this
 */
proto.proto.Transaction.prototype.setSignedtransactionbytes = function(value) {
  return jspb.Message.setProto3BytesField(this, 5, value);
};


goog.object.extend(exports, proto.proto);
