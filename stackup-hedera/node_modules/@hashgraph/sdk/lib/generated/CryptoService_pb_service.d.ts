export function CryptoService(): void;
export namespace CryptoService {
    namespace createAccount {
        export const methodName: string;
        export { CryptoService as service };
        export const requestStream: boolean;
        export const responseStream: boolean;
        export const requestType: typeof Transaction_pb.Transaction;
        export const responseType: typeof TransactionResponse_pb.TransactionResponse;
    }
    namespace updateAccount {
        const methodName_1: string;
        export { methodName_1 as methodName };
        export { CryptoService as service };
        const requestStream_1: boolean;
        export { requestStream_1 as requestStream };
        const responseStream_1: boolean;
        export { responseStream_1 as responseStream };
        const requestType_1: typeof Transaction_pb.Transaction;
        export { requestType_1 as requestType };
        const responseType_1: typeof TransactionResponse_pb.TransactionResponse;
        export { responseType_1 as responseType };
    }
    namespace cryptoTransfer {
        const methodName_2: string;
        export { methodName_2 as methodName };
        export { CryptoService as service };
        const requestStream_2: boolean;
        export { requestStream_2 as requestStream };
        const responseStream_2: boolean;
        export { responseStream_2 as responseStream };
        const requestType_2: typeof Transaction_pb.Transaction;
        export { requestType_2 as requestType };
        const responseType_2: typeof TransactionResponse_pb.TransactionResponse;
        export { responseType_2 as responseType };
    }
    namespace cryptoDelete {
        const methodName_3: string;
        export { methodName_3 as methodName };
        export { CryptoService as service };
        const requestStream_3: boolean;
        export { requestStream_3 as requestStream };
        const responseStream_3: boolean;
        export { responseStream_3 as responseStream };
        const requestType_3: typeof Transaction_pb.Transaction;
        export { requestType_3 as requestType };
        const responseType_3: typeof TransactionResponse_pb.TransactionResponse;
        export { responseType_3 as responseType };
    }
    namespace addLiveHash {
        const methodName_4: string;
        export { methodName_4 as methodName };
        export { CryptoService as service };
        const requestStream_4: boolean;
        export { requestStream_4 as requestStream };
        const responseStream_4: boolean;
        export { responseStream_4 as responseStream };
        const requestType_4: typeof Transaction_pb.Transaction;
        export { requestType_4 as requestType };
        const responseType_4: typeof TransactionResponse_pb.TransactionResponse;
        export { responseType_4 as responseType };
    }
    namespace deleteLiveHash {
        const methodName_5: string;
        export { methodName_5 as methodName };
        export { CryptoService as service };
        const requestStream_5: boolean;
        export { requestStream_5 as requestStream };
        const responseStream_5: boolean;
        export { responseStream_5 as responseStream };
        const requestType_5: typeof Transaction_pb.Transaction;
        export { requestType_5 as requestType };
        const responseType_5: typeof TransactionResponse_pb.TransactionResponse;
        export { responseType_5 as responseType };
    }
    namespace getLiveHash {
        const methodName_6: string;
        export { methodName_6 as methodName };
        export { CryptoService as service };
        const requestStream_6: boolean;
        export { requestStream_6 as requestStream };
        const responseStream_6: boolean;
        export { responseStream_6 as responseStream };
        const requestType_6: typeof Query_pb.Query;
        export { requestType_6 as requestType };
        const responseType_6: typeof Response_pb.Response;
        export { responseType_6 as responseType };
    }
    namespace getAccountRecords {
        const methodName_7: string;
        export { methodName_7 as methodName };
        export { CryptoService as service };
        const requestStream_7: boolean;
        export { requestStream_7 as requestStream };
        const responseStream_7: boolean;
        export { responseStream_7 as responseStream };
        const requestType_7: typeof Query_pb.Query;
        export { requestType_7 as requestType };
        const responseType_7: typeof Response_pb.Response;
        export { responseType_7 as responseType };
    }
    namespace cryptoGetBalance {
        const methodName_8: string;
        export { methodName_8 as methodName };
        export { CryptoService as service };
        const requestStream_8: boolean;
        export { requestStream_8 as requestStream };
        const responseStream_8: boolean;
        export { responseStream_8 as responseStream };
        const requestType_8: typeof Query_pb.Query;
        export { requestType_8 as requestType };
        const responseType_8: typeof Response_pb.Response;
        export { responseType_8 as responseType };
    }
    namespace getAccountInfo {
        const methodName_9: string;
        export { methodName_9 as methodName };
        export { CryptoService as service };
        const requestStream_9: boolean;
        export { requestStream_9 as requestStream };
        const responseStream_9: boolean;
        export { responseStream_9 as responseStream };
        const requestType_9: typeof Query_pb.Query;
        export { requestType_9 as requestType };
        const responseType_9: typeof Response_pb.Response;
        export { responseType_9 as responseType };
    }
    namespace getTransactionReceipts {
        const methodName_10: string;
        export { methodName_10 as methodName };
        export { CryptoService as service };
        const requestStream_10: boolean;
        export { requestStream_10 as requestStream };
        const responseStream_10: boolean;
        export { responseStream_10 as responseStream };
        const requestType_10: typeof Query_pb.Query;
        export { requestType_10 as requestType };
        const responseType_10: typeof Response_pb.Response;
        export { responseType_10 as responseType };
    }
    namespace getFastTransactionRecord {
        const methodName_11: string;
        export { methodName_11 as methodName };
        export { CryptoService as service };
        const requestStream_11: boolean;
        export { requestStream_11 as requestStream };
        const responseStream_11: boolean;
        export { responseStream_11 as responseStream };
        const requestType_11: typeof Query_pb.Query;
        export { requestType_11 as requestType };
        const responseType_11: typeof Response_pb.Response;
        export { responseType_11 as responseType };
    }
    namespace getTxRecordByTxID {
        const methodName_12: string;
        export { methodName_12 as methodName };
        export { CryptoService as service };
        const requestStream_12: boolean;
        export { requestStream_12 as requestStream };
        const responseStream_12: boolean;
        export { responseStream_12 as responseStream };
        const requestType_12: typeof Query_pb.Query;
        export { requestType_12 as requestType };
        const responseType_12: typeof Response_pb.Response;
        export { responseType_12 as responseType };
    }
    namespace getStakersByAccountID {
        const methodName_13: string;
        export { methodName_13 as methodName };
        export { CryptoService as service };
        const requestStream_13: boolean;
        export { requestStream_13 as requestStream };
        const responseStream_13: boolean;
        export { responseStream_13 as responseStream };
        const requestType_13: typeof Query_pb.Query;
        export { requestType_13 as requestType };
        const responseType_13: typeof Response_pb.Response;
        export { responseType_13 as responseType };
    }
}
export function CryptoServiceClient(serviceHost: any, options: any): void;
export class CryptoServiceClient {
    constructor(serviceHost: any, options: any);
    serviceHost: any;
    options: any;
    createAccount(requestMessage: any, metadata: any, callback: any, ...args: any[]): {
        cancel: () => void;
    };
    updateAccount(requestMessage: any, metadata: any, callback: any, ...args: any[]): {
        cancel: () => void;
    };
    cryptoTransfer(requestMessage: any, metadata: any, callback: any, ...args: any[]): {
        cancel: () => void;
    };
    cryptoDelete(requestMessage: any, metadata: any, callback: any, ...args: any[]): {
        cancel: () => void;
    };
    addLiveHash(requestMessage: any, metadata: any, callback: any, ...args: any[]): {
        cancel: () => void;
    };
    deleteLiveHash(requestMessage: any, metadata: any, callback: any, ...args: any[]): {
        cancel: () => void;
    };
    getLiveHash(requestMessage: any, metadata: any, callback: any, ...args: any[]): {
        cancel: () => void;
    };
    getAccountRecords(requestMessage: any, metadata: any, callback: any, ...args: any[]): {
        cancel: () => void;
    };
    cryptoGetBalance(requestMessage: any, metadata: any, callback: any, ...args: any[]): {
        cancel: () => void;
    };
    getAccountInfo(requestMessage: any, metadata: any, callback: any, ...args: any[]): {
        cancel: () => void;
    };
    getTransactionReceipts(requestMessage: any, metadata: any, callback: any, ...args: any[]): {
        cancel: () => void;
    };
    getFastTransactionRecord(requestMessage: any, metadata: any, callback: any, ...args: any[]): {
        cancel: () => void;
    };
    getTxRecordByTxID(requestMessage: any, metadata: any, callback: any, ...args: any[]): {
        cancel: () => void;
    };
    getStakersByAccountID(requestMessage: any, metadata: any, callback: any, ...args: any[]): {
        cancel: () => void;
    };
}
import Transaction_pb = require("./Transaction_pb");
import TransactionResponse_pb = require("./TransactionResponse_pb");
import Query_pb = require("./Query_pb");
import Response_pb = require("./Response_pb");
