import { Ed25519PrivateKey } from "./Ed25519PrivateKey";
import { MnemonicValidationResult } from "./MnemonicValidationResult";
/** result of `generateMnemonic()` */
export declare class Mnemonic {
    readonly _isLegacy: boolean;
    readonly words: string[];
    /**
     * Recover a mnemonic from a list of 24 words.
     *
     * @param words
     */
    constructor(words: string[]);
    /** Lazily generate the key, providing an optional passphrase to protect it with */
    toPrivateKey(passphrase: string): Promise<Ed25519PrivateKey>;
    /**
     * Legacy word mnemonic
     */
    toLegacyPrivateKey(): Promise<Ed25519PrivateKey>;
    /**
     * Generate a random 24-word mnemonic.
     *
     * If you are happy with the mnemonic produced you can call {@link .toPrivateKey} on the
     * returned object.
     *
     * This mnemonics that are compatible with the Android and iOS mobile wallets.
     *
     * **NOTE:** Mnemonics must be saved separately as they cannot be later recovered from a given
     * key.
     */
    static generate(): Mnemonic;
    /**
     * Recover a mnemonic phrase from a string, splitting on spaces.
     *
     * @param mnemonic
     */
    static fromString(mnemonic: string): Mnemonic;
    /**
     * Validate that this is a valid BIP-39 mnemonic as generated by BIP-39's rules.
     * <p>
     * Technically, invalid mnemonics can still be used to generate valid private keys,
     * but if they became invalid due to user error then it will be difficult for the user
     * to tell the difference unless they compare the generated keys.
     * <p>
     * During validation, the following conditions are checked in order:
     * <ol>
     *     <li>{@link this.words.length} == 24</li>
     *     <li>All strings in {@link this.words} exist in the BIP-39 standard English word list (no normalization is done).</li>
     *     <li>The calculated checksum for the mnemonic equals the checksum encoded in the mnemonic.</li>
     * </ol>
     * <p>
     *
     * @return the result of the validation.
     * @see {@link https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki | Bitcoin Improvement Project proposal 39 (BIP-39) }
     * @see {@link https://github.com/bitcoin/bips/blob/master/bip-0039/english.txt | BIP-39 English word list }
     */
    validate(): MnemonicValidationResult;
    /**
     * Validate that this is a valid legacy mnemonic as generated by the Android and iOS wallets.
     * <p>
     * Technically, invalid mnemonics can still be used to generate valid private keys,
     * but if they became invalid due to user error then it will be difficult for the user
     * to tell the difference unless they compare the generated keys.
     * <p>
     * During validation, the following conditions are checked in order:
     * <ol>
     *     <li>{@link this.words.length} == 22</li>
     *     <li>All strings in {@link this.words} exist in the legacy word list (no normalization is done).</li>
     *     <li>The calculated checksum for the mnemonic equals the checksum encoded in the mnemonic.</li>
     * </ol>
     * <p>
     *
     * @return the result of the validation.
     */
    private _validateLegacy;
    private _toLegacyEntropy;
    private _toLegacyEntropy2;
    toString(): string;
}
