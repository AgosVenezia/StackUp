/**
 * @typedef {object} EthereumTransactionDataEip1559JSON
 * @property {string} chainId
 * @property {string} nonce
 * @property {string} maxPriorityGas
 * @property {string} maxGas
 * @property {string} gasLimit
 * @property {string} to
 * @property {string} value
 * @property {string} callData
 * @property {string[]} accessList
 * @property {string} recId
 * @property {string} r
 * @property {string} s
 */
export default class EthereumTransactionDataEip1559 extends EthereumTransactionData {
    /**
     * @private
     * @param {object} props
     * @param {Uint8Array} props.chainId
     * @param {Uint8Array} props.nonce
     * @param {Uint8Array} props.maxPriorityGas
     * @param {Uint8Array} props.maxGas
     * @param {Uint8Array} props.gasLimit
     * @param {Uint8Array} props.to
     * @param {Uint8Array} props.value
     * @param {Uint8Array} props.callData
     * @param {Uint8Array[]} props.accessList
     * @param {Uint8Array} props.recId
     * @param {Uint8Array} props.r
     * @param {Uint8Array} props.s
     */
    private constructor();
    chainId: Uint8Array;
    nonce: Uint8Array;
    maxPriorityGas: Uint8Array;
    maxGas: Uint8Array;
    gasLimit: Uint8Array;
    to: Uint8Array;
    value: Uint8Array;
    accessList: Uint8Array[];
    recId: Uint8Array;
    r: Uint8Array;
    s: Uint8Array;
    /**
     * @returns {EthereumTransactionDataEip1559JSON}
     */
    toJSON(): EthereumTransactionDataEip1559JSON;
}
export type EthereumTransactionDataEip1559JSON = {
    chainId: string;
    nonce: string;
    maxPriorityGas: string;
    maxGas: string;
    gasLimit: string;
    to: string;
    value: string;
    callData: string;
    accessList: string[];
    recId: string;
    r: string;
    s: string;
};
import EthereumTransactionData from "./EthereumTransactionData.js";
