/**
 * Enum for LogLevel.
 */
export type LogLevel = number;
export namespace LogLevel {
    const NOTSET: number;
    const DEBUG: number;
    const INFO: number;
    const WARNING: number;
    const ERROR: number;
}
export default class DefaultLogger {
    /**
     * @private
     * @param {string} messagePrefix
     */
    private constructor();
    messagePrefix: string | undefined;
    /**
     * @param {(LogLevel | string)} level
     * @param {string} message
     * @param {...any} splat
     * @returns {void}
     */
    log(level: (LogLevel | string), message: string, ...splat: any[]): void;
    /**
     * @param {(string | Error)} message
     * @param {...any} splat
     * @returns {void}
     */
    info(message: (string | Error), ...splat: any[]): void;
    /**
     * @param {(string | Error)} message
     * @param {...any} splat
     * @returns {void}
     */
    debug(message: (string | Error), ...splat: any[]): void;
    /**
     * @param {(string | Error)} message
     * @param {...any} splat
     * @returns {void}
     */
    warn(message: (string | Error), ...splat: any[]): void;
    /**
     * @param {(string | Error)} message
     * @param {...any} splat
     * @returns {void}
     */
    error(message: (string | Error), ...splat: any[]): void;
    /**
     * @private
     * @param {object} data
     * @returns {string}
     */
    private format;
    /**
     * @private
     * @param {LogLevel} level
     * @param {object} data
     * @returns {void}
     */
    private internalLog;
    /**
     * @private
     * @param {LogLevel} level
     * @param {(string | Error)} message
     * @param {...any} splat
     * @returns {void}
     */
    private namedLog;
    /**
     *
     * @param {any} level
     * @returns {LogLevel}
     */
    coerceLogLevel(level: any): LogLevel;
}
