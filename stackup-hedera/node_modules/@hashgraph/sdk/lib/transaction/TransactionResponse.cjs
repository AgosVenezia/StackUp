"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _ReceiptStatusError = _interopRequireDefault(require("../ReceiptStatusError.cjs"));
var _Status = _interopRequireDefault(require("../Status.cjs"));
var _TransactionReceiptQuery = _interopRequireDefault(require("./TransactionReceiptQuery.cjs"));
var _TransactionRecordQuery = _interopRequireDefault(require("./TransactionRecordQuery.cjs"));
var _AccountId = _interopRequireDefault(require("../account/AccountId.cjs"));
var _TransactionId = _interopRequireDefault(require("./TransactionId.cjs"));
var hex = _interopRequireWildcard(require("../encoding/hex.cjs"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*-
 * ‌
 * Hedera JavaScript SDK
 * ​
 * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

/**
 * @typedef {import("../client/Client.js").default<*, *>} Client
 * @typedef {import("./TransactionReceipt.js").default} TransactionReceipt
 * @typedef {import("./TransactionRecord.js").default} TransactionRecord
 * @typedef {import("../Signer.js").Signer} Signer
 */

/**
 * @typedef {object} TransactionResponseJSON
 * @property {string} nodeId
 * @property {string} transactionHash
 * @property {string} transactionId
 */

class TransactionResponse {
  /**
   * @internal
   * @param {object} props
   * @param {AccountId} props.nodeId
   * @param {Uint8Array} props.transactionHash
   * @param {TransactionId} props.transactionId
   */
  constructor(props) {
    /** @readonly */
    this.nodeId = props.nodeId;

    /** @readonly */
    this.transactionHash = props.transactionHash;

    /** @readonly */
    this.transactionId = props.transactionId;
    Object.freeze(this);
  }

  /**
   * @param {TransactionResponseJSON} json
   * @returns {TransactionResponse}
   */
  static fromJSON(json) {
    return new TransactionResponse({
      nodeId: _AccountId.default.fromString(json.nodeId),
      transactionHash: hex.decode(json.transactionHash),
      transactionId: _TransactionId.default.fromString(json.transactionId)
    });
  }

  /**
   * @param {Client} client
   * @returns {Promise<TransactionReceipt>}
   */
  async getReceipt(client) {
    const receipt = await this.getReceiptQuery().execute(client);
    if (receipt.status !== _Status.default.Success) {
      throw new _ReceiptStatusError.default({
        transactionReceipt: receipt,
        status: receipt.status,
        transactionId: this.transactionId
      });
    }
    return receipt;
  }

  /**
   * @param {Client} client
   * @returns {Promise<TransactionRecord>}
   */
  async getRecord(client) {
    await this.getReceipt(client);
    return this.getRecordQuery().execute(client);
  }

  /**
   * @param {Signer} signer
   * @returns {Promise<TransactionReceipt>}
   */
  async getReceiptWithSigner(signer) {
    const receipt = await this.getReceiptQuery().executeWithSigner(signer);
    if (receipt.status !== _Status.default.Success) {
      throw new _ReceiptStatusError.default({
        transactionReceipt: receipt,
        status: receipt.status,
        transactionId: this.transactionId
      });
    }
    return receipt;
  }

  /**
   * @param {Signer} signer
   * @returns {Promise<TransactionRecord>}
   */
  async getRecordWithSigner(signer) {
    await this.getReceiptWithSigner(signer);
    return this.getRecordQuery().executeWithSigner(signer);
  }

  /**
   * @returns {TransactionReceiptQuery}
   */
  getReceiptQuery() {
    return new _TransactionReceiptQuery.default().setTransactionId(this.transactionId).setNodeAccountIds([this.nodeId]);
  }

  /**
   * @returns {TransactionRecordQuery}
   */
  getRecordQuery() {
    return new _TransactionRecordQuery.default().setTransactionId(this.transactionId).setNodeAccountIds([this.nodeId]);
  }

  /**
   * @returns {TransactionResponseJSON}
   */
  toJSON() {
    return {
      nodeId: this.nodeId.toString(),
      transactionHash: hex.encode(this.transactionHash),
      transactionId: this.transactionId.toString()
    };
  }

  /**
   * @returns {string}
   */
  toString() {
    return JSON.stringify(this.toJSON());
  }
}
exports.default = TransactionResponse;