"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _Query = _interopRequireWildcard(require("../query/Query.cjs"));
var _Status = _interopRequireDefault(require("../Status.cjs"));
var _TransactionReceipt = _interopRequireDefault(require("./TransactionReceipt.cjs"));
var _TransactionId = _interopRequireDefault(require("./TransactionId.cjs"));
var _PrecheckStatusError = _interopRequireDefault(require("../PrecheckStatusError.cjs"));
var _ReceiptStatusError = _interopRequireDefault(require("../ReceiptStatusError.cjs"));
var _Executable = require("../Executable.cjs");
var _jsLogger = _interopRequireDefault(require("js-logger"));
var HashgraphProto = _interopRequireWildcard(require("@hashgraph/proto"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
/*-
 * ‌
 * Hedera JavaScript SDK
 * ​
 * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

const {
  proto
} = HashgraphProto;

/**
 * @typedef {import("../account/AccountId.js").default} AccountId
 * @typedef {import("../channel/Channel.js").default} Channel
 * @typedef {import("../client/Client.js").default<*, *>} Client
 */

/**
 * @augments {Query<TransactionReceipt>}
 */
class TransactionReceiptQuery extends _Query.default {
  /**
   * @param {object} [props]
   * @param {TransactionId | string} [props.transactionId]
   * @param {boolean} [props.includeDuplicates]
   * @param {boolean} [props.includeChildren]
   * @param {boolean} [props.validateStatus]
   */
  constructor(props = {}) {
    super();

    /**
     * @private
     * @type {?TransactionId}
     */
    this._transactionId = null;

    /**
     * @private
     * @type {?boolean}
     */
    this._includeChildren = null;

    /**
     * @private
     * @type {?boolean}
     */
    this._includeDuplicates = null;
    this._validateStatus = true;
    if (props.transactionId != null) {
      this.setTransactionId(props.transactionId);
    }
    if (props.includeChildren != null) {
      this.setIncludeChildren(props.includeChildren);
    }
    if (props.includeDuplicates != null) {
      this.setIncludeDuplicates(props.includeDuplicates);
    }
    if (props.validateStatus != null) {
      this.setValidateStatus(props.validateStatus);
    }
  }

  /**
   * @internal
   * @param {HashgraphProto.proto.IQuery} query
   * @returns {TransactionReceiptQuery}
   */
  static _fromProtobuf(query) {
    const receipt = /** @type {HashgraphProto.proto.ITransactionGetReceiptQuery} */
    query.transactionGetReceipt;
    return new TransactionReceiptQuery({
      transactionId: receipt.transactionID ? _TransactionId.default._fromProtobuf(receipt.transactionID) : undefined,
      includeDuplicates: receipt.includeDuplicates != null ? receipt.includeDuplicates : undefined,
      includeChildren: receipt.includeChildReceipts != null ? receipt.includeChildReceipts : undefined
    });
  }

  /**
   * @returns {?TransactionId}
   */
  get transactionId() {
    return this._transactionId;
  }

  /**
   * Set the transaction ID for which the receipt is being requested.
   *
   * @param {TransactionId | string} transactionId
   * @returns {this}
   */
  setTransactionId(transactionId) {
    this._transactionId = typeof transactionId === "string" ? _TransactionId.default.fromString(transactionId) : transactionId.clone();
    return this;
  }

  /**
   * @param {boolean} includeDuplicates
   * @returns {TransactionReceiptQuery}
   */
  setIncludeDuplicates(includeDuplicates) {
    this._includeDuplicates = includeDuplicates;
    return this;
  }

  /**
   * @returns {boolean}
   */
  get includeDuplicates() {
    return this._includeDuplicates != null ? this._includeDuplicates : false;
  }

  /**
   * @param {boolean} includeChildren
   * @returns {TransactionReceiptQuery}
   */
  setIncludeChildren(includeChildren) {
    this._includeChildren = includeChildren;
    return this;
  }

  /**
   * @returns {boolean}
   */
  get includeChildren() {
    return this._includeChildren != null ? this._includeChildren : false;
  }

  /**
   * @param {boolean} validateStatus
   * @returns {this}
   */
  setValidateStatus(validateStatus) {
    this._validateStatus = validateStatus;
    return this;
  }

  /**
   * @returns {boolean}
   */
  get validateStatus() {
    return this._validateStatus;
  }

  /**
   * @override
   * @protected
   * @returns {boolean}
   */
  _isPaymentRequired() {
    return false;
  }

  /**
   * @override
   * @internal
   * @param {HashgraphProto.proto.IQuery} request
   * @param {HashgraphProto.proto.IResponse} response
   * @returns {[Status, ExecutionState]}
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _shouldRetry(request, response) {
    const {
      nodeTransactionPrecheckCode
    } = this._mapResponseHeader(response);
    let status = _Status.default._fromCode(nodeTransactionPrecheckCode != null ? nodeTransactionPrecheckCode : proto.ResponseCodeEnum.OK);
    _jsLogger.default.debug(`[${this._getLogId()}] received node precheck status ${status.toString()}`);
    switch (status) {
      case _Status.default.Busy:
      case _Status.default.Unknown:
      case _Status.default.ReceiptNotFound:
        return [status, _Executable.ExecutionState.Retry];
      case _Status.default.Ok:
        break;
      default:
        return [status, _Executable.ExecutionState.Error];
    }
    const transactionGetReceipt = /** @type {HashgraphProto.proto.ITransactionGetReceiptResponse} */
    response.transactionGetReceipt;
    const receipt = /** @type {HashgraphProto.proto.ITransactionReceipt} */
    transactionGetReceipt.receipt;
    const receiptStatusCode = /** @type {HashgraphProto.proto.ResponseCodeEnum} */
    receipt.status;
    status = _Status.default._fromCode(receiptStatusCode);
    _jsLogger.default.debug(`[${this._getLogId()}] received receipt status ${status.toString()}`);
    switch (status) {
      case _Status.default.Busy:
      case _Status.default.Unknown:
      case _Status.default.ReceiptNotFound:
        return [status, _Executable.ExecutionState.Retry];
      case _Status.default.Success:
        return [status, _Executable.ExecutionState.Finished];
      default:
        return [status, this._validateStatus ? _Executable.ExecutionState.Error : _Executable.ExecutionState.Finished];
    }
  }

  /**
   * @returns {TransactionId}
   */
  _getTransactionId() {
    if (this._transactionId != null) {
      return this._transactionId;
    }
    return super._getTransactionId();
  }

  /**
   * @override
   * @internal
   * @param {HashgraphProto.proto.IQuery} request
   * @param {HashgraphProto.proto.IResponse} response
   * @returns {Error}
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _mapStatusError(request, response) {
    const {
      nodeTransactionPrecheckCode
    } = this._mapResponseHeader(response);
    let status = _Status.default._fromCode(nodeTransactionPrecheckCode != null ? nodeTransactionPrecheckCode : proto.ResponseCodeEnum.OK);
    switch (status) {
      case _Status.default.Ok:
        // Do nothing
        break;
      default:
        return new _PrecheckStatusError.default({
          status,
          transactionId: this._getTransactionId(),
          contractFunctionResult: null
        });
    }
    const transactionGetReceipt = /** @type {HashgraphProto.proto.ITransactionGetReceiptResponse} */
    response.transactionGetReceipt;
    const receipt = /** @type {HashgraphProto.proto.ITransactionReceipt} */
    transactionGetReceipt.receipt;
    const receiptStatusCode = /** @type {HashgraphProto.proto.ResponseCodeEnum} */
    receipt.status;
    status = _Status.default._fromCode(receiptStatusCode);
    if (this._transactionId == null) {
      throw new Error("Failed to construct `ReceiptStatusError` because `transactionId` is `null`");
    }
    return new _ReceiptStatusError.default({
      status,
      transactionId: this._transactionId,
      transactionReceipt: _TransactionReceipt.default._fromProtobuf(transactionGetReceipt)
    });
  }

  /**
   * @param {Client} client
   */
  _validateChecksums(client) {
    if (this._transactionId != null && this._transactionId.accountId != null) {
      this._transactionId.accountId.validateChecksum(client);
    }
  }

  /**
   * @override
   * @internal
   * @param {Channel} channel
   * @param {HashgraphProto.proto.IQuery} request
   * @returns {Promise<HashgraphProto.proto.IResponse>}
   */
  _execute(channel, request) {
    return channel.crypto.getTransactionReceipts(request);
  }

  /**
   * @override
   * @internal
   * @param {HashgraphProto.proto.IResponse} response
   * @returns {HashgraphProto.proto.IResponseHeader}
   */
  _mapResponseHeader(response) {
    const transactionGetReceipt = /** @type {HashgraphProto.proto.ITransactionGetReceiptResponse} */
    response.transactionGetReceipt;
    return (/** @type {HashgraphProto.proto.IResponseHeader} */
      transactionGetReceipt.header
    );
  }

  /**
   * @protected
   * @override
   * @param {HashgraphProto.proto.IResponse} response
   * @param {AccountId} nodeAccountId
   * @param {HashgraphProto.proto.IQuery} request
   * @returns {Promise<TransactionReceipt>}
   */
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  _mapResponse(response, nodeAccountId, request) {
    const transactionGetReceipt = /** @type {HashgraphProto.proto.ITransactionGetReceiptResponse} */
    response.transactionGetReceipt;
    return Promise.resolve(_TransactionReceipt.default._fromProtobuf(transactionGetReceipt));
  }

  /**
   * @override
   * @internal
   * @param {HashgraphProto.proto.IQueryHeader} header
   * @returns {HashgraphProto.proto.IQuery}
   */
  _onMakeRequest(header) {
    return {
      transactionGetReceipt: {
        header,
        transactionID: this._transactionId != null ? this._transactionId._toProtobuf() : null,
        includeDuplicates: this._includeDuplicates,
        includeChildReceipts: this._includeChildren
      }
    };
  }

  /**
   * @returns {string}
   */
  _getLogId() {
    return `TransactionReceiptQuery:${this._timestamp.toString()}`;
  }
}
exports.default = TransactionReceiptQuery;
_Query.QUERY_REGISTRY.set("transactionGetReceipt",
// eslint-disable-next-line @typescript-eslint/unbound-method
TransactionReceiptQuery._fromProtobuf);