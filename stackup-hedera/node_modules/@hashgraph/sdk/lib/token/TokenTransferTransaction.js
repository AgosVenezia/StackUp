"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenTransferTransaction = void 0;
const TransactionBuilder_1 = require("../TransactionBuilder");
const CryptoTransfer_pb_1 = require("../generated/CryptoTransfer_pb");
const CryptoService_pb_service_1 = require("../generated/CryptoService_pb_service");
const BasicTypes_pb_1 = require("../generated/BasicTypes_pb");
const bignumber_js_1 = require("bignumber.js");
const AccountId_1 = require("../account/AccountId");
const TokenId_1 = require("./TokenId");
/**
 * Transfer tokens from some accounts to other accounts. Each negative amount is withdrawn from the corresponding
 * account (a sender), and each positive one is added to the corresponding account (a receiver). All amounts must
 * have sum of zero.
 * Each amount is a number with the lowest denomination possible for a token. Example:
 * Token X has 2 decimals. Account A transfers amount of 100 tokens by providing 10000 as amount in the TransferList.
 * If Account A wants to send 100.55 tokens, he must provide 10055 as amount.
 *
 * If any sender account fails to have sufficient token balance, then the entire transaction fails and none of the
 * transfers occur, though transaction fee is still charged.
 *
 * @deprecated Use `TransferTransaction` instead
 */
class TokenTransferTransaction extends TransactionBuilder_1.SingleTransactionBuilder {
    constructor() {
        super();
        this._body = new CryptoTransfer_pb_1.CryptoTransferTransactionBody();
        this._tokenIdIndexes = new Map();
        this._body.setTokentransfersList([]);
        this._inner.setCryptotransfer(this._body);
        console.warn("Use `TransferTransaction` instead");
    }
    addSender(tokenId, accountId, amount) {
        return this.addTransfer(tokenId, accountId, amount instanceof bignumber_js_1.default ?
            amount.negated() :
            new bignumber_js_1.default(amount).negated());
    }
    addRecipient(tokenId, accountId, amount) {
        return this.addTransfer(tokenId, accountId, amount instanceof bignumber_js_1.default ?
            amount :
            new bignumber_js_1.default(amount));
    }
    addTransfer(tokenId, accountId, amount) {
        const index = this._tokenIdIndexes.get(new TokenId_1.TokenId(tokenId).toString());
        const token = new TokenId_1.TokenId(tokenId);
        if (index == null) {
            this._tokenIdIndexes.set(token.toString(), this._body.getTokentransfersList().length);
        }
        let list;
        if (index != null) {
            list = this._body.getTokentransfersList()[index];
        }
        else {
            list = new BasicTypes_pb_1.TokenTransferList();
            this._body.addTokentransfers(list);
        }
        list.setToken(token._toProto());
        const transfers = list.getTransfersList();
        const acctAmt = new BasicTypes_pb_1.AccountAmount();
        acctAmt.setAccountid(new AccountId_1.AccountId(accountId)._toProto());
        acctAmt.setAmount(amount instanceof bignumber_js_1.default ?
            amount.toString(10) :
            new bignumber_js_1.default(amount).toString(10));
        transfers.push(acctAmt);
        return this;
    }
    _doValidate(_) { }
    get _method() {
        return CryptoService_pb_service_1.CryptoService.cryptoTransfer;
    }
}
exports.TokenTransferTransaction = TokenTransferTransaction;
