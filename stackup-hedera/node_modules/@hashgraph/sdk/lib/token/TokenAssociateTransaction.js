"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenAssociateTransaction = void 0;
const TransactionBuilder_1 = require("../TransactionBuilder");
const TokenAssociate_pb_1 = require("../generated/TokenAssociate_pb");
const TokenService_pb_service_1 = require("../generated/TokenService_pb_service");
const TokenId_1 = require("./TokenId");
const AccountId_1 = require("../account/AccountId");
/**
 * Associates the provided account with the provided tokens. Must be signed by the provided Account's key.
 * If the provided account is not found, the transaction will resolve to INVALID_ACCOUNT_ID.
 * If the provided account has been associated, the transaction will resolve to ACCOUNT_ASSOCIATED.
 * If any of the provided tokens is not found, the transaction will resolve to INVALID_TOKEN_REF.
 * If any of the provided tokens has been associated, the transaction will resolve to TOKEN_WAS_ASSOCIATED.
 * If an association between the provided account and any of the tokens already exists, the transaction will resolve to
 * TOKEN_ALREADY_ASSOCIATED_TO_ACCOUNT.
 * If the provided account's associations count exceed the constraint of maximum token associations per account, the
 * transaction will resolve to TOKENS_PER_ACCOUNT_LIMIT_EXCEEDED.
 * On success, associations between the provided account and tokens are made and the account is ready to interact with
 * the tokens.
 */
class TokenAssociateTransaction extends TransactionBuilder_1.SingleTransactionBuilder {
    constructor() {
        super();
        this._body = new TokenAssociate_pb_1.TokenAssociateTransactionBody();
        this._inner.setTokenassociate(this._body);
    }
    /**
     * The account to be associated with the provided tokens
     */
    setAccountId(id) {
        this._body.setAccount(new AccountId_1.AccountId(id)._toProto());
        return this;
    }
    /**
     * The tokens to be associated with the provided account
     */
    addTokenId(id) {
        this._body.addTokens(new TokenId_1.TokenId(id)._toProto());
        return this;
    }
    get _method() {
        return TokenService_pb_service_1.TokenService.associateTokens;
    }
    _doValidate(_) { }
}
exports.TokenAssociateTransaction = TokenAssociateTransaction;
