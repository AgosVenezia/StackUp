"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenMintTransaction = void 0;
const TransactionBuilder_1 = require("../TransactionBuilder");
const TokenMint_pb_1 = require("../generated/TokenMint_pb");
const TokenService_pb_service_1 = require("../generated/TokenService_pb_service");
const TokenId_1 = require("./TokenId");
const bignumber_js_1 = require("bignumber.js");
/**
 * Mints tokens to the Token's treasury Account. If no Supply Key is defined, the transaction will resolve to
 * TOKEN_HAS_NO_SUPPLY_KEY. The operation increases the Total Supply of the Token. The maximum total supply a token
 * can have is 2^63-1. The amount provided must be in the lowest denomination possible. Example:
 * Token A has 2 decimals. In order to mint 100 tokens, one must provide amount of 10000. In order to mint 100.55
 * tokens, one must provide amount of 10055.
 */
class TokenMintTransaction extends TransactionBuilder_1.SingleTransactionBuilder {
    constructor() {
        super();
        this._body = new TokenMint_pb_1.TokenMintTransactionBody();
        this._inner.setTokenmint(this._body);
    }
    /**
     * The token for which to mint tokens. If token does not exist, transaction results in INVALID_TOKEN_ID
     */
    setTokenId(id) {
        this._body.setToken(new TokenId_1.TokenId(id)._toProto());
        return this;
    }
    /**
     * The amount to mint to the Treasury Account. Amount must be a positive non-zero number represented in the lowest
     * denomination of the token. The new supply must be lower than 2^63.
     */
    setAmount(amount) {
        this._body.setAmount((amount instanceof bignumber_js_1.default ?
            amount :
            new bignumber_js_1.default(amount)).toString());
        return this;
    }
    get _method() {
        return TokenService_pb_service_1.TokenService.mintToken;
    }
    _doValidate(_) { }
}
exports.TokenMintTransaction = TokenMintTransaction;
