"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenWipeTransaction = void 0;
const TransactionBuilder_1 = require("../TransactionBuilder");
const TokenWipeAccount_pb_1 = require("../generated/TokenWipeAccount_pb");
const TokenService_pb_service_1 = require("../generated/TokenService_pb_service");
const TokenId_1 = require("./TokenId");
const AccountId_1 = require("../account/AccountId");
const bignumber_js_1 = require("bignumber.js");
//
// Wipes the provided amount of tokens from the specified Account. Must be signed by the Token's
// Wipe key.
// If the provided account is not found, the transaction will resolve to INVALID_ACCOUNT_ID.
// If the provided account has been deleted, the transaction will resolve to ACCOUNT_DELETED.
// If the provided token is not found, the transaction will resolve to INVALID_TOKEN_ID.
// If the provided token has been deleted, the transaction will resolve to TOKEN_WAS_DELETED.
// If an Association between the provided token and account is not found, the transaction will
// resolve to TOKEN_NOT_ASSOCIATED_TO_ACCOUNT.
// If Wipe Key is not present in the Token, transaction results in TOKEN_HAS_NO_WIPE_KEY.
// If the provided account is the Token's Treasury Account, transaction results in CANNOT_WIPE_TOKEN_TREASURY_ACCOUNT
// On success, tokens are removed from the account and the total supply of the token is decreased by the wiped amount.
//
// The amount provided is in the lowest denomination possible. Example:
// Token A has 2 decimals. In order to wipe 100 tokens from account, one must provide amount of 10000. In order to wipe 100.55 tokens, one must provide amount of 10055.
//
class TokenWipeTransaction extends TransactionBuilder_1.SingleTransactionBuilder {
    constructor() {
        super();
        this._body = new TokenWipeAccount_pb_1.TokenWipeAccountTransactionBody();
        this._inner.setTokenwipe(this._body);
    }
    /**
     * The token for which the account will be wiped. If token does not exist, transaction results in INVALID_TOKEN_ID
     */
    setTokenId(id) {
        this._body.setToken(new TokenId_1.TokenId(id)._toProto());
        return this;
    }
    /**
     * The account to be wiped
     */
    setAccountId(id) {
        this._body.setAccount(new AccountId_1.AccountId(id)._toProto());
        return this;
    }
    /**
     * The amount of tokens to wipe from the specified account. Amount must be a positive non-zero number in the lowest
     * denomination possible, not bigger than the token balance of the account (0; balance]
     */
    setAmount(amount) {
        this._body.setAmount((amount instanceof bignumber_js_1.default ?
            amount :
            new bignumber_js_1.default(amount)).toString());
        return this;
    }
    get _method() {
        return TokenService_pb_service_1.TokenService.wipeTokenAccount;
    }
    _doValidate(_) { }
}
exports.TokenWipeTransaction = TokenWipeTransaction;
