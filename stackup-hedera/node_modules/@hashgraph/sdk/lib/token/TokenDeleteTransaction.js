"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenDeleteTransaction = void 0;
const TransactionBuilder_1 = require("../TransactionBuilder");
const TokenDelete_pb_1 = require("../generated/TokenDelete_pb");
const TokenService_pb_service_1 = require("../generated/TokenService_pb_service");
const TokenId_1 = require("./TokenId");
/**
 * Marks a token as deleted, though it will remain in the ledger.
 * The operation must be signed by the specified Admin Key of the Token. If admin key is not set, Transaction will
 * result in TOKEN_IS_IMMUTABlE. Once deleted update, mint, burn, wipe, freeze, unfreeze, grant kyc, revoke kyc and
 * token transfer transactions will resolve to TOKEN_WAS_DELETED.
 */
class TokenDeleteTransaction extends TransactionBuilder_1.SingleTransactionBuilder {
    constructor() {
        super();
        this._body = new TokenDelete_pb_1.TokenDeleteTransactionBody();
        this._inner.setTokendeletion(this._body);
    }
    /**
     * The token to be deleted. If invalid token is specified, transaction will result in INVALID_TOKEN_ID
     */
    setTokenId(id) {
        this._body.setToken(new TokenId_1.TokenId(id)._toProto());
        return this;
    }
    get _method() {
        return TokenService_pb_service_1.TokenService.deleteToken;
    }
    _doValidate(_) { }
}
exports.TokenDeleteTransaction = TokenDeleteTransaction;
