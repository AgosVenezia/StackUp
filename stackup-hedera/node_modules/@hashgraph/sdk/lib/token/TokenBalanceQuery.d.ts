import { QueryBuilder } from "../QueryBuilder";
import { grpc } from "@improbable-eng/grpc-web";
import { Query } from "../generated/Query_pb";
import { Response } from "../generated/Response_pb";
import { QueryHeader } from "../generated/QueryHeader_pb";
import { AccountIdLike } from "../account/AccountId";
import { TokenBalance as ProtoTokenBalance } from "../generated/BasicTypes_pb";
import { ResponseHeader } from "../generated/ResponseHeader_pb";
import { TokenId, TokenIdLike } from "./TokenId";
import BigNumber from "bignumber.js";
export declare class TokenBalanceMap {
    private _balances;
    constructor(balances: ProtoTokenBalance[]);
    get(tokenId: TokenIdLike): BigNumber | undefined;
    values(): IterableIterator<BigNumber>;
    keys(): IterableIterator<TokenId>;
    [Symbol.iterator](): IterableIterator<[TokenId, BigNumber]>;
    toString(): string;
}
/**
 * Get the balance of a cryptocurrency token. This returns only the balance, so it is a smaller
 * and faster reply than CryptoGetInfo, which returns the balance plus additional information.
 */
export declare class TokenBalanceQuery extends QueryBuilder<TokenBalanceMap> {
    private readonly _builder;
    constructor();
    /**
     * The account ID for which information is requested.
     */
    setAccountId(id: AccountIdLike): this;
    protected _doLocalValidate(_: string[]): void;
    protected _getMethod(): grpc.UnaryMethodDefinition<Query, Response>;
    protected _getHeader(): QueryHeader;
    protected _mapResponseHeader(response: Response): ResponseHeader;
    protected _mapResponse(response: Response): TokenBalanceMap;
    protected _isPaymentRequired(): boolean;
}
