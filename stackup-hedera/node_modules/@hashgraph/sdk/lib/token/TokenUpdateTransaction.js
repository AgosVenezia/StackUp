"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenUpdateTransaction = void 0;
const TransactionBuilder_1 = require("../TransactionBuilder");
const AccountId_1 = require("../account/AccountId");
const TokenUpdate_pb_1 = require("../generated/TokenUpdate_pb");
const TokenService_pb_service_1 = require("../generated/TokenService_pb_service");
const Timestamp_1 = require("../Timestamp");
const TokenId_1 = require("./TokenId");
const util_1 = require("../util");
/**
 * Updates an already created Token. If no value is given for a field, that field is left unchanged. For an immutable
 * tokens (that is, a token created without an adminKey), only the expiry may be updated. Setting any other field in
 * that case will cause the transaction status to resolve to TOKEN_IS_IMMUTABlE.
 */
class TokenUpdateTransaction extends TransactionBuilder_1.SingleTransactionBuilder {
    constructor() {
        super();
        this._body = new TokenUpdate_pb_1.TokenUpdateTransactionBody();
        this._inner.setTokenupdate(this._body);
    }
    /**
     * The Token to be updated
     */
    setTokenId(id) {
        this._body.setToken(new TokenId_1.TokenId(id)._toProto());
        return this;
    }
    /**
     * The new Name of the Token. Must be a string of ASCII characters.
     */
    setName(name) {
        this._body.setName(name);
        return this;
    }
    /**
     * The new Symbol of the Token. Must be UTF-8 capitalized alphabetical string identifying the token.
     */
    setSymbol(symbol) {
        this._body.setSymbol(symbol);
        return this;
    }
    /**
     * The new Treasury account of the Token. If the provided treasury account is not existing or deleted, the response
     * will be INVALID_TREASURY_ACCOUNT_FOR_TOKEN. If successful, the Token balance held in the previous
     * Treasury Account is transferred to the new one.
     */
    setTreasury(treasury) {
        this._body.setTreasury(new AccountId_1.AccountId(treasury)._toProto());
        return this;
    }
    /**
     * The new Admin key of the Token. If Token is immutable, transaction will resolve to TOKEN_IS_IMMUTABlE.
     */
    setAdminKey(key) {
        this._body.setAdminkey(key._toProtoKey());
        return this;
    }
    /**
     * The new KYC key of the Token. If Token does not have currently a KYC key, transaction will resolve to
     * TOKEN_HAS_NO_KYC_KEY.
     */
    setKycKey(key) {
        this._body.setKyckey(key._toProtoKey());
        return this;
    }
    /**
     * The new Freeze key of the Token. If the Token does not have currently a Freeze key, transaction will resolve to
     * TOKEN_HAS_NO_FREEZE_KEY.
     */
    setFreezeKey(key) {
        this._body.setFreezekey(key._toProtoKey());
        return this;
    }
    /**
     * The new Wipe key of the Token. If the Token does not have currently a Wipe key, transaction will resolve to
     * TOKEN_HAS_NO_WIPE_KEY.
     */
    setWipeKey(key) {
        this._body.setWipekey(key._toProtoKey());
        return this;
    }
    /**
     * The new Supply key of the Token. If the Token does not have currently a Supply key, transaction will resolve to
     * TOKEN_HAS_NO_SUPPLY_KEY.
     */
    setSupplyKey(key) {
        this._body.setSupplykey(key._toProtoKey());
        return this;
    }
    /**
     * The new expiry time of the token. Expiry can be updated even if admin key is not set. If the provided expiry is
     * earlier than the current token expiry, transaction wil resolve to INVALID_EXPIRATION_TIME
     */
    setExpirationTime(date) {
        this._body.setExpiry(Timestamp_1.timestampToProto(Timestamp_1.dateToTimestamp(date)));
        return this;
    }
    /**
     * The new account which will be automatically charged to renew the token's expiration, at autoRenewPeriod interval.
     */
    setAutoRenewAccount(account) {
        this._body.setAutorenewaccount(new AccountId_1.AccountId(account)._toProto());
        return this;
    }
    /**
     * The new interval at which the auto-renew account will be charged to extend the token's expiry.
     */
    setAutoRenewPeriod(seconds) {
        this._body.setAutorenewperiod(util_1.newDuration(seconds));
        return this;
    }
    get _method() {
        return TokenService_pb_service_1.TokenService.updateToken;
    }
    _doValidate(_) { }
}
exports.TokenUpdateTransaction = TokenUpdateTransaction;
