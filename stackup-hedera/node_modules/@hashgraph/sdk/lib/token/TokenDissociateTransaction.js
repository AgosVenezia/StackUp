"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenDissociateTransaction = void 0;
const TransactionBuilder_1 = require("../TransactionBuilder");
const TokenDissociate_pb_1 = require("../generated/TokenDissociate_pb");
const TokenService_pb_service_1 = require("../generated/TokenService_pb_service");
const TokenId_1 = require("./TokenId");
const AccountId_1 = require("../account/AccountId");
/**
 * Dissociates the provided account with the provided tokens. Must be signed by the provided Account's key.
 * If the provided account is not found, the transaction will resolve to INVALID_ACCOUNT_ID.
 * If the provided account has been deleted, the transaction will resolve to ACCOUNT_DELETED.
 * If any of the provided tokens is not found, the transaction will resolve to INVALID_TOKEN_REF.
 * If any of the provided tokens has been deleted, the transaction will resolve to TOKEN_WAS_DELETED.
 * If an association between the provided account and any of the tokens does not exist, the transaction will resolve to
 * TOKEN_NOT_DISSOCIATED_TO_ACCOUNT.
 * If the provided account has a nonzero balance with any of the provided tokens, the transaction will resolve to
 * TRANSACTION_REQUIRES_ZERO_TOKEN_BALANCES.
 * On success, associations between the provided account and tokens are removed.
 */
class TokenDissociateTransaction extends TransactionBuilder_1.SingleTransactionBuilder {
    constructor() {
        super();
        this._body = new TokenDissociate_pb_1.TokenDissociateTransactionBody();
        this._inner.setTokendissociate(this._body);
    }
    /**
     * The account to be dissociated with the provided tokens
     */
    setAccountId(id) {
        this._body.setAccount(new AccountId_1.AccountId(id)._toProto());
        return this;
    }
    /**
     * The tokens to be dissociated with the provided account
     */
    addTokenId(id) {
        this._body.addTokens(new TokenId_1.TokenId(id)._toProto());
        return this;
    }
    get _method() {
        return TokenService_pb_service_1.TokenService.dissociateTokens;
    }
    _doValidate(_) { }
}
exports.TokenDissociateTransaction = TokenDissociateTransaction;
