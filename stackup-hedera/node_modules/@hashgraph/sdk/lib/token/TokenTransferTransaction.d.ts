import { SingleTransactionBuilder } from "../TransactionBuilder";
import { Transaction } from "../generated/Transaction_pb";
import { TransactionResponse } from "../generated/TransactionResponse_pb";
import { grpc } from "@improbable-eng/grpc-web";
import BigNumber from "bignumber.js";
import { AccountIdLike } from "../account/AccountId";
import { TokenIdLike } from "./TokenId";
/**
 * Transfer tokens from some accounts to other accounts. Each negative amount is withdrawn from the corresponding
 * account (a sender), and each positive one is added to the corresponding account (a receiver). All amounts must
 * have sum of zero.
 * Each amount is a number with the lowest denomination possible for a token. Example:
 * Token X has 2 decimals. Account A transfers amount of 100 tokens by providing 10000 as amount in the TransferList.
 * If Account A wants to send 100.55 tokens, he must provide 10055 as amount.
 *
 * If any sender account fails to have sufficient token balance, then the entire transaction fails and none of the
 * transfers occur, though transaction fee is still charged.
 *
 * @deprecated Use `TransferTransaction` instead
 */
export declare class TokenTransferTransaction extends SingleTransactionBuilder {
    private readonly _body;
    private _tokenIdIndexes;
    constructor();
    addSender(tokenId: TokenIdLike, accountId: AccountIdLike, amount: number | BigNumber): this;
    addRecipient(tokenId: TokenIdLike, accountId: AccountIdLike, amount: number | BigNumber): this;
    addTransfer(tokenId: TokenIdLike, accountId: AccountIdLike, amount: number | BigNumber): this;
    protected _doValidate(_: string[]): void;
    protected get _method(): grpc.UnaryMethodDefinition<Transaction, TransactionResponse>;
}
