"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _exportNames = {
  LocalProvider: true,
  Client: true
};
Object.defineProperty(exports, "Client", {
  enumerable: true,
  get: function () {
    return _NodeClient.default;
  }
});
Object.defineProperty(exports, "LocalProvider", {
  enumerable: true,
  get: function () {
    return _LocalProvider.default;
  }
});
var _jsLogger = _interopRequireDefault(require("js-logger"));
var _exports = require("./exports.cjs");
Object.keys(_exports).forEach(function (key) {
  if (key === "default" || key === "__esModule") return;
  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;
  if (key in exports && exports[key] === _exports[key]) return;
  Object.defineProperty(exports, key, {
    enumerable: true,
    get: function () {
      return _exports[key];
    }
  });
});
var _LocalProvider = _interopRequireDefault(require("./LocalProvider.cjs"));
var _NodeClient = _interopRequireDefault(require("./client/NodeClient.cjs"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*-
 * ‌
 * Hedera JavaScript SDK
 * ​
 * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

/**
 * The entry point for NodeJS applications
 */

if (process != null && process.env != null && process.env.HEDERA_SDK_LOG_LEVEL != null) {
  _jsLogger.default.useDefaults();
  switch (process.env.HEDERA_SDK_LOG_LEVEL) {
    case "DEBUG":
      _jsLogger.default.setLevel(_jsLogger.default.DEBUG);
      break;
    case "TRACE":
      _jsLogger.default.setLevel(_jsLogger.default.TRACE);
      break;
    case "WARN":
      _jsLogger.default.setLevel(_jsLogger.default.WARN);
      break;
    case "INFO":
      _jsLogger.default.setLevel(_jsLogger.default.INFO);
      break;
  }
}