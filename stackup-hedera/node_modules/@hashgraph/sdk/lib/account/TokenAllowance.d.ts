/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").proto.IGrantedTokenAllowance} HashgraphProto.proto.IGrantedTokenAllowance
 * @typedef {import("@hashgraph/proto").proto.ITokenAllowance} HashgraphProto.proto.ITokenAllowance
 * @typedef {import("@hashgraph/proto").proto.ITokenID} HashgraphProto.proto.ITokenID
 * @typedef {import("@hashgraph/proto").proto.IAccountID} HashgraphProto.proto.IAccountID
 */
/**
 * @typedef {import("../client/Client.js").default<*, *>} Client
 */
export default class TokenAllowance {
    /**
     * @internal
     * @param {HashgraphProto.proto.ITokenAllowance} allowance
     * @returns {TokenAllowance}
     */
    static _fromProtobuf(allowance: HashgraphProto.proto.ITokenAllowance): TokenAllowance;
    /**
     * @internal
     * @param {HashgraphProto.proto.IGrantedTokenAllowance} allowance
     * @param {AccountId} ownerAccountId
     * @returns {TokenAllowance}
     */
    static _fromGrantedProtobuf(allowance: HashgraphProto.proto.IGrantedTokenAllowance, ownerAccountId: AccountId): TokenAllowance;
    /**
     * @internal
     * @param {object} props
     * @param {TokenId} props.tokenId
     * @param {AccountId | null} props.spenderAccountId
     * @param {AccountId | null} props.ownerAccountId
     * @param {Long | null} props.amount
     */
    constructor(props: {
        tokenId: TokenId;
        spenderAccountId: AccountId | null;
        ownerAccountId: AccountId | null;
        amount: Long | null;
    });
    /**
     * The token that the allowance pertains to.
     *
     * @readonly
     */
    readonly tokenId: TokenId;
    /**
     * The account ID of the spender of the hbar allowance.
     *
     * @readonly
     */
    readonly spenderAccountId: AccountId | null;
    /**
     * The account ID of the owner of the hbar allowance.
     *
     * @readonly
     */
    readonly ownerAccountId: AccountId | null;
    /**
     * The current balance of the spender's token allowance.
     * **NOTE**: If `null`, the spender has access to all of the account owner's NFT instances
     * (currently owned and any in the future).
     *
     * @readonly
     */
    readonly amount: Long.Long | null;
    /**
     * @internal
     * @returns {HashgraphProto.proto.ITokenAllowance}
     */
    _toProtobuf(): HashgraphProto.proto.ITokenAllowance;
    /**
     * @param {Client} client
     */
    _validateChecksums(client: import("../client/Client.js").default<any, any>): void;
}
export namespace HashgraphProto {
    namespace proto {
        type IGrantedTokenAllowance = import("@hashgraph/proto").proto.IGrantedTokenAllowance;
        type ITokenAllowance = import("@hashgraph/proto").proto.ITokenAllowance;
        type ITokenID = import("@hashgraph/proto").proto.ITokenID;
        type IAccountID = import("@hashgraph/proto").proto.IAccountID;
    }
}
export type Client = import("../client/Client.js").default<any, any>;
import TokenId from "../token/TokenId.js";
import AccountId from "./AccountId.js";
import Long from "long";
