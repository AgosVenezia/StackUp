"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _TokenId = _interopRequireDefault(require("../token/TokenId.cjs"));
var _TokenRelationship = _interopRequireDefault(require("./TokenRelationship.cjs"));
var _ObjectMap = _interopRequireDefault(require("../ObjectMap.cjs"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*-
 * ‌
 * Hedera JavaScript SDK
 * ​
 * Copyright (C) 2020 - 2022 Hedera Hashgraph, LLC
 * ​
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * ‍
 */

/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").proto.ITokenRelationship} HashgraphProto.proto.ITokenRelationship
 * @typedef {import("@hashgraph/proto").proto.ITokenID} HashgraphProto.proto.ITokenID
 */

/**
 * @typedef {import("long")} Long
 */

/**
 * @augments {ObjectMap<TokenId, TokenRelationship>}
 */
class TokenRelationshipMap extends _ObjectMap.default {
  constructor() {
    super(s => _TokenId.default.fromString(s));
  }

  /**
   * @param {HashgraphProto.proto.ITokenRelationship[]} relationships
   * @returns {TokenRelationshipMap}
   */
  static _fromProtobuf(relationships) {
    const tokenRelationships = new TokenRelationshipMap();
    for (const relationship of relationships) {
      const tokenId = _TokenId.default._fromProtobuf( /** @type {HashgraphProto.proto.ITokenID} */
      relationship.tokenId);
      tokenRelationships._set(tokenId, _TokenRelationship.default._fromProtobuf(relationship));
    }
    return tokenRelationships;
  }

  /**
   * @returns {HashgraphProto.proto.ITokenRelationship[]}
   */
  _toProtobuf() {
    const list = [];

    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    for (const [_, relationship] of this) {
      list.push(relationship._toProtobuf());
    }
    return list;
  }
}
exports.default = TokenRelationshipMap;