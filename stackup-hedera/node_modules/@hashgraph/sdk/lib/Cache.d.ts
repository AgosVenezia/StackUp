export default CACHE;
export type ContractId = import("./contract/ContractId.js").default;
export type AccountId = import("./account/AccountId.js").default;
export type KeyList = import("./KeyList.js").default;
export type PublicKey = import("./PublicKey.js").default;
export type PrivateKey = import("./PrivateKey.js").default;
export type EvmAddress = import("./EvmAddress.js").default;
export type EthereumTransactionData = import("./EthereumTransactionData.js").default;
export type TransactionReceiptQuery = import("./transaction/TransactionReceiptQuery.js").default;
export type TransactionRecordQuery = import("./transaction/TransactionRecordQuery.js").default;
export type AddressBookQuery = import("./network/AddressBookQuery.js").default;
export namespace HashgraphProto {
    namespace proto {
        type IKey = import("@hashgraph/proto").proto.IKey;
        type IKeyList = import("@hashgraph/proto").proto.IKeyList;
        type IThresholdKey = import("@hashgraph/proto").proto.IThresholdKey;
        type IContractID = import("@hashgraph/proto").proto.IContractID;
    }
}
export namespace cryptography {
    type PrivateKey = import("@hashgraph/cryptography").PrivateKey;
}
export type FromProtobufKeyFuncT<ProtobufT extends object, SdkT extends object> = (proto: ProtobufT) => SdkT;
declare const CACHE: Cache;
/**
 * @typedef {import("./contract/ContractId.js").default} ContractId
 * @typedef {import("./account/AccountId.js").default} AccountId
 * @typedef {import("./KeyList.js").default} KeyList
 * @typedef {import("./PublicKey.js").default} PublicKey
 * @typedef {import("./PrivateKey.js").default} PrivateKey
 * @typedef {import("./EvmAddress.js").default} EvmAddress
 * @typedef {import("./EthereumTransactionData.js").default} EthereumTransactionData
 * @typedef {import("./transaction/TransactionReceiptQuery.js").default} TransactionReceiptQuery
 * @typedef {import("./transaction/TransactionRecordQuery.js").default} TransactionRecordQuery
 * @typedef {import("./network/AddressBookQuery.js").default} AddressBookQuery
 */
/**
 * @namespace proto
 * @typedef {import("@hashgraph/proto").proto.IKey} HashgraphProto.proto.IKey
 * @typedef {import("@hashgraph/proto").proto.IKeyList} HashgraphProto.proto.IKeyList
 * @typedef {import("@hashgraph/proto").proto.IThresholdKey} HashgraphProto.proto.IThresholdKey
 * @typedef {import("@hashgraph/proto").proto.IContractID} HashgraphProto.proto.IContractID
 */
/**
 * @namespace cryptography
 * @typedef {import("@hashgraph/cryptography").PrivateKey} cryptography.PrivateKey
 */
/**
 * @template {object} ProtobufT
 * @template {object} SdkT
 * @typedef {{ (proto: ProtobufT): SdkT }} FromProtobufKeyFuncT
 */
/**
 * This variable is strictly designed to prevent cyclic dependencies.
 */
declare class Cache {
    /** @type {number} */
    _timeDrift: number;
    /** @type {FromProtobufKeyFuncT<HashgraphProto.proto.IContractID, ContractId> | null} */
    _contractId: FromProtobufKeyFuncT<import("@hashgraph/proto/lib/proto.js").proto.IContractID, import("./contract/ContractId.js").default> | null;
    /** @type {FromProtobufKeyFuncT<HashgraphProto.proto.IKeyList, KeyList> | null} */
    _keyList: FromProtobufKeyFuncT<import("@hashgraph/proto/lib/proto.js").proto.IKeyList, import("./KeyList.js").default> | null;
    /** @type {FromProtobufKeyFuncT<HashgraphProto.proto.IThresholdKey, KeyList> | null} */
    _thresholdKey: FromProtobufKeyFuncT<import("@hashgraph/proto/lib/proto.js").proto.IThresholdKey, import("./KeyList.js").default> | null;
    /** @type {FromProtobufKeyFuncT<Uint8Array, PublicKey> | null} */
    _publicKeyED25519: FromProtobufKeyFuncT<Uint8Array, import("./PublicKey.js").default> | null;
    /** @type {FromProtobufKeyFuncT<Uint8Array, PublicKey> | null} */
    _publicKeyECDSA: FromProtobufKeyFuncT<Uint8Array, import("./PublicKey.js").default> | null;
    /** @type {((key: cryptography.PrivateKey) => PrivateKey) | null} */
    _privateKeyConstructor: ((key: cryptography.PrivateKey) => PrivateKey) | null;
    /** @type {((shard: Long | number, realm: Long | number, key: PublicKey) => AccountId) | null} */
    _accountIdConstructor: ((shard: Long | number, realm: Long | number, key: PublicKey) => AccountId) | null;
    /** @type {FromProtobufKeyFuncT<HashgraphProto.proto.IContractID, ContractId> | null} */
    _delegateContractId: FromProtobufKeyFuncT<import("@hashgraph/proto/lib/proto.js").proto.IContractID, import("./contract/ContractId.js").default> | null;
    /** @type {FromProtobufKeyFuncT<Uint8Array, EvmAddress> | null} */
    _evmAddress: FromProtobufKeyFuncT<Uint8Array, import("./EvmAddress.js").default> | null;
    /** @type {((bytes: Uint8Array) => EthereumTransactionData) | null} */
    _ethereumTransactionDataLegacyFromBytes: ((bytes: Uint8Array) => EthereumTransactionData) | null;
    /** @type {((bytes: Uint8Array) => EthereumTransactionData) | null} */
    _ethereumTransactionDataEip1559FromBytes: ((bytes: Uint8Array) => EthereumTransactionData) | null;
    /** @type {(() => TransactionReceiptQuery) | null} */
    _transactionReceiptQueryConstructor: (() => TransactionReceiptQuery) | null;
    /** @type {(() => TransactionRecordQuery) | null} */
    _transactionRecordQueryConstructor: (() => TransactionRecordQuery) | null;
    /**
     * @param {number} timeDrift
     */
    setTimeDrift(timeDrift: number): void;
    /**
     * @returns {number}
     */
    get timeDrift(): number;
    /**
     * @param {FromProtobufKeyFuncT<HashgraphProto.proto.IContractID, ContractId>} contractId
     */
    setContractId(contractId: FromProtobufKeyFuncT<import("@hashgraph/proto/lib/proto.js").proto.IContractID, import("./contract/ContractId.js").default>): void;
    /**
     * @returns {FromProtobufKeyFuncT<HashgraphProto.proto.IContractID, ContractId>}
     */
    get contractId(): FromProtobufKeyFuncT<import("@hashgraph/proto/lib/proto.js").proto.IContractID, import("./contract/ContractId.js").default>;
    /**
     * @param {FromProtobufKeyFuncT<HashgraphProto.proto.IKeyList, KeyList>} keyList
     */
    setKeyList(keyList: FromProtobufKeyFuncT<import("@hashgraph/proto/lib/proto.js").proto.IKeyList, import("./KeyList.js").default>): void;
    /**
     * @returns {FromProtobufKeyFuncT<HashgraphProto.proto.IKeyList, KeyList>}
     */
    get keyList(): FromProtobufKeyFuncT<import("@hashgraph/proto/lib/proto.js").proto.IKeyList, import("./KeyList.js").default>;
    /**
     * @param {FromProtobufKeyFuncT<HashgraphProto.proto.IThresholdKey, KeyList>} thresholdKey
     */
    setThresholdKey(thresholdKey: FromProtobufKeyFuncT<import("@hashgraph/proto/lib/proto.js").proto.IThresholdKey, import("./KeyList.js").default>): void;
    /**
     * @returns {FromProtobufKeyFuncT<HashgraphProto.proto.IThresholdKey, KeyList>}
     */
    get thresholdKey(): FromProtobufKeyFuncT<import("@hashgraph/proto/lib/proto.js").proto.IThresholdKey, import("./KeyList.js").default>;
    /**
     * @param {FromProtobufKeyFuncT<Uint8Array, PublicKey>} publicKeyED25519
     */
    setPublicKeyED25519(publicKeyED25519: FromProtobufKeyFuncT<Uint8Array, import("./PublicKey.js").default>): void;
    /**
     * @returns {FromProtobufKeyFuncT<Uint8Array, PublicKey>}
     */
    get publicKeyED25519(): FromProtobufKeyFuncT<Uint8Array, import("./PublicKey.js").default>;
    /**
     * @param {FromProtobufKeyFuncT<Uint8Array, PublicKey>} publicKeyECDSA
     */
    setPublicKeyECDSA(publicKeyECDSA: FromProtobufKeyFuncT<Uint8Array, import("./PublicKey.js").default>): void;
    /**
     * @returns {FromProtobufKeyFuncT<Uint8Array, PublicKey>}
     */
    get publicKeyECDSA(): FromProtobufKeyFuncT<Uint8Array, import("./PublicKey.js").default>;
    /**
     * @param {((key: cryptography.PrivateKey) => PrivateKey)} privateKeyConstructor
     */
    setPrivateKeyConstructor(privateKeyConstructor: (key: cryptography.PrivateKey) => PrivateKey): void;
    /**
     * @returns {((key: cryptography.PrivateKey) => PrivateKey)}
     */
    get privateKeyConstructor(): (key: cryptography.PrivateKey) => PrivateKey;
    /**
     * @param {((shard: Long | number, realm: Long | number, key: PublicKey) => AccountId)} accountIdConstructor
     */
    setAccountIdConstructor(accountIdConstructor: (shard: Long | number, realm: Long | number, key: PublicKey) => AccountId): void;
    /**
     * @returns {((shard: Long | number, realm: Long | number, key: PublicKey) => AccountId)}
     */
    get accountIdConstructor(): (shard: Long | number, realm: Long | number, key: PublicKey) => AccountId;
    /**
     * @param {FromProtobufKeyFuncT<HashgraphProto.proto.IContractID, ContractId>} delegateContractId
     */
    setDelegateContractId(delegateContractId: FromProtobufKeyFuncT<import("@hashgraph/proto/lib/proto.js").proto.IContractID, import("./contract/ContractId.js").default>): void;
    /**
     * @returns {FromProtobufKeyFuncT<HashgraphProto.proto.IContractID, ContractId>}
     */
    get delegateContractId(): FromProtobufKeyFuncT<import("@hashgraph/proto/lib/proto.js").proto.IContractID, import("./contract/ContractId.js").default>;
    /**
     * @param {FromProtobufKeyFuncT<Uint8Array, EvmAddress>} evmAddress
     */
    setEvmAddress(evmAddress: FromProtobufKeyFuncT<Uint8Array, import("./EvmAddress.js").default>): void;
    /**
     * @returns {FromProtobufKeyFuncT<Uint8Array, EvmAddress>}
     */
    get evmAddress(): FromProtobufKeyFuncT<Uint8Array, import("./EvmAddress.js").default>;
    /**
     * @param {((bytes: Uint8Array) => EthereumTransactionData)} ethereumTransactionDataLegacyFromBytes
     */
    setEthereumTransactionDataLegacyFromBytes(ethereumTransactionDataLegacyFromBytes: (bytes: Uint8Array) => EthereumTransactionData): void;
    /**
     * @returns {((bytes: Uint8Array) => EthereumTransactionData)}
     */
    get ethereumTransactionDataLegacyFromBytes(): (bytes: Uint8Array) => EthereumTransactionData;
    /**
     * @param {((bytes: Uint8Array) => EthereumTransactionData)} ethereumTransactionDataEip1559FromBytes
     */
    setEthereumTransactionDataEip1559FromBytes(ethereumTransactionDataEip1559FromBytes: (bytes: Uint8Array) => EthereumTransactionData): void;
    /**
     * @returns {((bytes: Uint8Array) => EthereumTransactionData)}
     */
    get ethereumTransactionDataEip1559FromBytes(): (bytes: Uint8Array) => EthereumTransactionData;
    /**
     * @param {(() => TransactionReceiptQuery)} transactionReceiptQueryConstructor
     */
    setTransactionReceiptQueryConstructor(transactionReceiptQueryConstructor: (() => TransactionReceiptQuery)): void;
    /**
     * @returns {(() => TransactionReceiptQuery)}
     */
    get transactionReceiptQueryConstructor(): () => TransactionReceiptQuery;
    /**
     * @param {(() => TransactionRecordQuery)} transactionRecordQueryConstructor
     */
    setTransactionRecordQueryConstructor(transactionRecordQueryConstructor: (() => TransactionRecordQuery)): void;
    /**
     * @returns {(() => TransactionRecordQuery)}
     */
    get transactionRecordQueryConstructor(): () => TransactionRecordQuery;
    /**
     * @param {() => AddressBookQuery} addressBookQueryConstructor
     */
    setAddressBookQueryConstructor(addressBookQueryConstructor: () => AddressBookQuery): void;
    _addressBookQueryConstructor: (() => AddressBookQuery) | undefined;
    /**
     * @returns {() => AddressBookQuery}
     */
    get addressBookQueryConstructor(): () => AddressBookQuery;
}
