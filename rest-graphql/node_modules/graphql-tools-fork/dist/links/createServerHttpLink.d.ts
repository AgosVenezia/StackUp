/// <reference types="node" />
import { Readable } from 'stream';
import { ApolloLink, RequestHandler } from 'apollo-link';
import { HttpOptions, UriFunction } from 'apollo-link-http-common';
import KnownLengthFormData, { AppendOptions } from 'form-data';
declare class FormData extends KnownLengthFormData {
    private hasUnknowableLength;
    constructor(options?: any);
    append(key: string, value: any, optionsOrFilename?: AppendOptions | string): void;
    getLength(callback: (err: Error | null, length: number) => void): void;
    getLengthSync(): number;
}
export declare type Function = UriFunction;
export declare type Options = HttpOptions & {
    /**
     * If set to true, use the HTTP GET method for query operations. Mutations
     * will still use the method specified in fetchOptions.method (which defaults
     * to POST).
     */
    useGETForQueries?: boolean;
    serializer?: (method: string) => any;
    appendFile?: (form: FormData, index: string, file: File) => void;
};
export { HttpOptions as FetchOptions };
interface File {
    createReadStream?: () => Readable;
    filename?: string;
    mimetype?: string;
    name?: string;
}
/**
 * Function that creates a server-side terminating link with support for the
 * GraphQL multipart request protocol.
 */
export declare const createServerHttpLink: (linkOptions?: Options) => ApolloLink;
export declare class ServerHttpLink extends ApolloLink {
    requester: RequestHandler;
    constructor(opts?: HttpOptions);
}
