var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var Interfaces_1 = require("../../Interfaces");
var index_1 = require("../../utils/index");
var index_2 = require("../../polyfills/index");
var RenameRootTypes = /** @class */ (function () {
    function RenameRootTypes(renamer) {
        this.renamer = renamer;
        this.map = {};
        this.reverseMap = {};
    }
    RenameRootTypes.prototype.transformSchema = function (originalSchema) {
        var _a;
        var _this = this;
        return index_1.mapSchema(originalSchema, (_a = {},
            _a[Interfaces_1.MapperKind.ROOT_OBJECT] = function (type) {
                var oldName = type.name;
                var newName = _this.renamer(oldName);
                if (newName && newName !== oldName) {
                    _this.map[oldName] = type.name;
                    _this.reverseMap[newName] = oldName;
                    return new graphql_1.GraphQLObjectType(__assign(__assign({}, index_2.toConfig(type)), { name: newName }));
                }
            },
            _a));
    };
    RenameRootTypes.prototype.transformRequest = function (originalRequest) {
        var _a;
        var _this = this;
        var newDocument = graphql_1.visit(originalRequest.document, (_a = {},
            _a[graphql_1.Kind.NAMED_TYPE] = function (node) {
                var name = node.name.value;
                if (name in _this.reverseMap) {
                    return __assign(__assign({}, node), { name: {
                            kind: graphql_1.Kind.NAME,
                            value: _this.reverseMap[name],
                        } });
                }
            },
            _a));
        return {
            document: newDocument,
            variables: originalRequest.variables,
        };
    };
    RenameRootTypes.prototype.transformResult = function (result) {
        return __assign(__assign({}, result), { data: this.renameTypes(result.data) });
    };
    RenameRootTypes.prototype.renameTypes = function (value) {
        var _this = this;
        if (value == null) {
            return value;
        }
        else if (Array.isArray(value)) {
            value.forEach(function (v, index) {
                value[index] = _this.renameTypes(v);
            });
            return value;
        }
        else if (typeof value === 'object') {
            Object.keys(value).forEach(function (key) {
                value[key] =
                    key === '__typename'
                        ? _this.renamer(value[key])
                        : _this.renameTypes(value[key]);
            });
            return value;
        }
        return value;
    };
    return RenameRootTypes;
}());
exports.default = RenameRootTypes;
//# sourceMappingURL=RenameRootTypes.js.map