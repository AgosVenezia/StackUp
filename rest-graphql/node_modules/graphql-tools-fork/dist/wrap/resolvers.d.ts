import { GraphQLSchema, GraphQLFieldResolver, GraphQLObjectType } from 'graphql';
import { Transform, IResolvers, Operation, SubschemaConfig } from '../Interfaces';
export declare type Mapping = {
    [typeName: string]: {
        [fieldName: string]: {
            name: string;
            operation: Operation;
        };
    };
};
export declare function generateProxyingResolvers({ subschemaConfig, transforms, createProxyingResolver, }: {
    subschemaConfig: SubschemaConfig;
    transforms?: Array<Transform>;
    createProxyingResolver?: ({ schema, transforms, operation, fieldName, }: {
        schema?: GraphQLSchema | SubschemaConfig;
        transforms?: Array<Transform>;
        operation?: Operation;
        fieldName?: string;
    }) => GraphQLFieldResolver<any, any>;
}): IResolvers;
export declare function generateSimpleMapping(targetSchema: GraphQLSchema): Mapping;
export declare function generateMappingFromObjectType(type: GraphQLObjectType, operation: Operation): {
    [fieldName: string]: {
        name: string;
        operation: Operation;
    };
};
export declare function stripResolvers(schema: GraphQLSchema): void;
