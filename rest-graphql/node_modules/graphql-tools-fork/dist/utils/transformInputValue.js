Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
/**
 * @category Input Value Utility
 */
function transformInputValue(type, value, transformer) {
    if (value == null) {
        return value;
    }
    var nullableType = graphql_1.getNullableType(type);
    if (graphql_1.isLeafType(nullableType)) {
        return transformer(nullableType, value);
    }
    else if (graphql_1.isListType(nullableType)) {
        return value.map(function (listMember) {
            return transformInputValue(nullableType.ofType, listMember, transformer);
        });
    }
    else if (graphql_1.isInputObjectType(nullableType)) {
        var fields_1 = nullableType.getFields();
        var newValue_1 = {};
        Object.keys(value).forEach(function (key) {
            newValue_1[key] = transformInputValue(fields_1[key].type, value[key], transformer);
        });
        return newValue_1;
    }
    // unreachable, no other possible return value
}
exports.transformInputValue = transformInputValue;
/**
 * @category Input Value Utility
 */
function serializeInputValue(type, value) {
    return transformInputValue(type, value, function (t, v) { return t.serialize(v); });
}
exports.serializeInputValue = serializeInputValue;
/**
 * @category Input Value Utility
 */
function parseInputValue(type, value) {
    return transformInputValue(type, value, function (t, v) { return t.parseValue(v); });
}
exports.parseInputValue = parseInputValue;
/**
 * @category Input Value Utility
 */
function parseInputValueLiteral(type, value) {
    return transformInputValue(type, value, function (t, v) { return t.parseLiteral(v, {}); });
}
exports.parseInputValueLiteral = parseInputValueLiteral;
//# sourceMappingURL=transformInputValue.js.map