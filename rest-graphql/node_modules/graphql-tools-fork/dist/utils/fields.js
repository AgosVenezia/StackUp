var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var index_1 = require("../polyfills/index");
/**
 * @category Schema Utility
 */
function appendFields(typeMap, typeName, fields) {
    var type = typeMap[typeName];
    if (type != null) {
        var typeConfig = index_1.toConfig(type);
        var originalFields_1 = typeConfig.fields;
        var newFields_1 = {};
        Object.keys(originalFields_1).forEach(function (fieldName) {
            newFields_1[fieldName] = originalFields_1[fieldName];
        });
        Object.keys(fields).forEach(function (fieldName) {
            newFields_1[fieldName] = fields[fieldName];
        });
        type = new graphql_1.GraphQLObjectType(__assign(__assign({}, typeConfig), { fields: newFields_1 }));
    }
    else {
        type = new graphql_1.GraphQLObjectType({
            name: typeName,
            fields: fields,
        });
    }
    typeMap[typeName] = type;
}
exports.appendFields = appendFields;
/**
 * @category Schema Utility
 */
function removeFields(typeMap, typeName, testFn) {
    var type = typeMap[typeName];
    var typeConfig = index_1.toConfig(type);
    var originalFields = typeConfig.fields;
    var newFields = {};
    var removedFields = {};
    Object.keys(originalFields).forEach(function (fieldName) {
        if (testFn(fieldName, originalFields[fieldName])) {
            removedFields[fieldName] = originalFields[fieldName];
        }
        else {
            newFields[fieldName] = originalFields[fieldName];
        }
    });
    type = new graphql_1.GraphQLObjectType(__assign(__assign({}, typeConfig), { fields: newFields }));
    typeMap[typeName] = type;
    return removedFields;
}
exports.removeFields = removeFields;
//# sourceMappingURL=fields.js.map