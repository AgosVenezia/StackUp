var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var index_1 = require("../polyfills/index");
var graphqlVersion_1 = require("./graphqlVersion");
var map_1 = require("./map");
/**
 * @category Schema Utility
 */
function cloneDirective(directive) {
    return new graphql_1.GraphQLDirective(index_1.toConfig(directive));
}
exports.cloneDirective = cloneDirective;
/**
 * @category Type Utility
 */
function cloneType(type) {
    if (graphql_1.isObjectType(type)) {
        var config = index_1.toConfig(type);
        return new graphql_1.GraphQLObjectType(__assign(__assign({}, config), { interfaces: typeof config.interfaces === 'function'
                ? config.interfaces
                : config.interfaces.slice() }));
    }
    else if (graphql_1.isInterfaceType(type)) {
        var config = index_1.toConfig(type);
        var newConfig = __assign(__assign({}, config), { interfaces: graphqlVersion_1.graphqlVersion() >= 15
                ? typeof config
                    .interfaces === 'function'
                    ? config
                        .interfaces
                    : config.interfaces.slice()
                : undefined });
        return new graphql_1.GraphQLInterfaceType(newConfig);
    }
    else if (graphql_1.isUnionType(type)) {
        var config = index_1.toConfig(type);
        return new graphql_1.GraphQLUnionType(__assign(__assign({}, config), { types: config.types.slice() }));
    }
    else if (graphql_1.isInputObjectType(type)) {
        return new graphql_1.GraphQLInputObjectType(index_1.toConfig(type));
    }
    else if (graphql_1.isEnumType(type)) {
        return new graphql_1.GraphQLEnumType(index_1.toConfig(type));
    }
    else if (graphql_1.isScalarType(type)) {
        return index_1.isSpecifiedScalarType(type)
            ? type
            : new graphql_1.GraphQLScalarType(index_1.toConfig(type));
    }
    throw new Error("Invalid type " + type);
}
exports.cloneType = cloneType;
/**
 * @category Schema Utility
 */
function cloneSchema(schema) {
    return map_1.mapSchema(schema);
}
exports.cloneSchema = cloneSchema;
//# sourceMappingURL=clone.js.map