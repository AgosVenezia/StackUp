var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var SchemaDirectiveVisitor_1 = require("../utils/SchemaDirectiveVisitor");
/**
 * Let's take a look at how we can create `@upper` Directive to upper-case a string returned from resolve on Field
 *
 * To start, let's grab the schema definition string from the `makeExecutableSchema` example [in the "Generating a schema" article](/generate-schema/#example).
 *
 * ```
 * import { makeExecutableSchema } from 'graphql-tools';
 * import { graphql } from 'graphql';
 *
 * // Construct a schema, using GraphQL schema language
 * const typeDefs = `
 *   directive @upper on FIELD_DEFINITION
 *
 *   type Query {
 *     hello: String @upper
 *   }
 * `;
 *
 * // Implement resolvers for out custom Directive
 * const directiveResolvers = {
 *   upper(
 *     next,
 *     src,
 *     args,
 *     context,
 *   ) {
 *     return next().then((str) => {
 *       if (typeof(str) === 'string') {
 *         return str.toUpperCase();
 *       }
 *       return str;
 *     });
 *   },
 * }
 *
 * // Provide resolver functions for your schema fields
 * const resolvers = {
 *   Query: {
 *     hello: (root, args, context) => {
 *       return 'Hello world!';
 *     },
 *   },
 * };
 *
 * export const schema = makeExecutableSchema({
 *   typeDefs,
 *   resolvers,
 *   directiveResolvers,
 * });
 *
 * const query = `
 * query UPPER_HELLO {
 *   hello
 * }
 * `;
 *
 * graphql(schema, query).then((result) => console.log('Got result', result));
 * ```
 *
 * > Note: next() always return a Promise for consistency, resolved with original resolver value or rejected with an error.
 *
 * ## Multi-Directives example
 *
 * Multi-Directives on a field will be apply with LTR order.
 *
 * ```
 * // graphql-tools combines a schema string with resolvers.
 * import { makeExecutableSchema } from 'graphql-tools';
 *
 * // Construct a schema, using GraphQL schema language
 * const typeDefs = `
 *   directive @upper on FIELD_DEFINITION
 *   directive @concat(value: String!) on FIELD_DEFINITION
 *
 *   type Query {
 *     foo: String @concat(value: "@gmail.com") @upper
 *   }
 * `;
 *
 * // Customs directives, check https://github.com/apollographql/graphql-tools/pull/518
 * // for more examples
 * const directiveResolvers = {
 *   upper(
 *     next,
 *     src,
 *     args,
 *     context,
 *   ) {
 *     return next().then((str) => {
 *       if (typeof(str) === 'string') {
 *         return str.toUpperCase();
 *       }
 *       return str;
 *     });
 *   },
 *   concat(
 *     next,
 *     src,
 *     args,
 *     context,
 *   ) {
 *     return next().then((str) => {
 *       if (typeof(str) !== 'undefined') {
 *         return `${str}${args.value}`;
 *       }
 *       return str;
 *     });
 *   },
 * }
 *
 * // Provide resolver functions for your schema fields
 * const resolvers = {
 *   Query: {
 *     foo: (root, args, context) => {
 *       return 'foo';
 *     },
 *   },
 * };
 *
 * // Required: Export the GraphQL.js schema object as "schema"
 * export const schema = makeExecutableSchema({
 *   typeDefs,
 *   resolvers,
 *   directiveResolvers,
 * });
 * ```
 *
 * The result with query `{foo}` will be:
 * ```on
 * {
 *   "data": {
 *     "foo": "FOO@GMAIL.COM"
 *   }
 * }
 * ```
 *
 * ## API
 *
 * ### directiveResolvers option
 *
 * ```
 * import { makeExecutableSchema } from 'graphql-tools';
 *
 * const directiveResolvers = {
 *   // directive resolvers implement
 * };
 *
 * const schema = makeExecutableSchema({
 *   // ... other options
 *   directiveResolvers,
 * })
 * ```
 *
 * `makeExecutableSchema` has new option field is `directiveResolvers`, a map object for custom Directive's resolvers.
 *
 * ### attachDirectiveResolvers
 *
 * ```
 * import { attachDirectiveResolvers } from 'graphql-tools';
 *
 * const directiveResolvers = {
 *   // directive resolvers implement
 * };
 *
 * attachDirectiveResolvers(
 *   schema,
 *   directiveResolvers,
 * );
 * ```
 *
 * Given an instance of GraphQLSchema and a `directiveResolvers` map object, `attachDirectiveResolvers` wrap all field's resolver with directive resolvers.
 */
function attachDirectiveResolvers(schema, directiveResolvers) {
    if (typeof directiveResolvers !== 'object') {
        throw new Error("Expected directiveResolvers to be of type object, got " + typeof directiveResolvers);
    }
    if (Array.isArray(directiveResolvers)) {
        throw new Error('Expected directiveResolvers to be of type object, got Array');
    }
    var schemaDirectives = Object.create(null);
    Object.keys(directiveResolvers).forEach(function (directiveName) {
        schemaDirectives[directiveName] = /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                return _super !== null && _super.apply(this, arguments) || this;
            }
            class_1.prototype.visitFieldDefinition = function (field) {
                var resolver = directiveResolvers[directiveName];
                var originalResolver = field.resolve != null ? field.resolve : graphql_1.defaultFieldResolver;
                var directiveArgs = this.args;
                field.resolve = function () {
                    var args = [];
                    for (var _i = 0; _i < arguments.length; _i++) {
                        args[_i] = arguments[_i];
                    }
                    var source = args[0] /* original args */, context = args[2], info = args[3];
                    return resolver(function () {
                        return new Promise(function (resolve, reject) {
                            var result = originalResolver.apply(field, args);
                            if (result instanceof Error) {
                                reject(result);
                            }
                            resolve(result);
                        });
                    }, source, directiveArgs, context, info);
                };
            };
            return class_1;
        }(SchemaDirectiveVisitor_1.SchemaDirectiveVisitor));
    });
    SchemaDirectiveVisitor_1.SchemaDirectiveVisitor.visitSchemaDirectives(schema, schemaDirectives);
}
exports.default = attachDirectiveResolvers;
//# sourceMappingURL=attachDirectiveResolvers.js.map