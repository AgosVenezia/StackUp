//# signature=UnityEngine.SpriteShapeModule#bb9bd7a8dbe8c0a42a026e252d61c338#0.0.4
// @ts-nocheck
declare module 'UnityEngine.U2D' {

    import * as System from 'System';
    import * as UnityEngine from 'UnityEngine';
    import * as Unity_Jobs from 'Unity.Jobs';
    import * as Unity_Collections from 'Unity.Collections';
        
    /**
     * Input parameters for the SpriteShape tessellator.
     */
    class SpriteShapeParameters extends System.ValueType {
        /**
         * The world space transform of the GameObject used for calculating the UVs of the Fill texture.
         */
        public transform: UnityEngine.Matrix4x4;
        /**
         * The texture to be used for the fill of the SpriteShape.
         */
        public fillTexture: UnityEngine.Texture2D;
        /**
         * The scale to be used to calculate the UVs of the fill texture.
         */
        public fillScale: number;
        /**
         * The tessellation quality of the input Spline that determines the complexity of the mesh.
         */
        public splineDetail: number;
        /**
         * The threshold of the angle that indicates whether it is a corner or not.
         */
        public angleThreshold: number;
        /**
         * The local displacement of the Sprite when tessellated.
         */
        public borderPivot: number;
        /**
         * The threshold of the angle that decides if it should be tessellated as a curve or a corner.
         */
        public bevelCutoff: number;
        /**
         * The radius of the curve to be tessellated.
         */
        public bevelSize: number;
        /**
         * If true, the Shape will be tessellated as a closed form.
         */
        public carpet: boolean;
        /**
         * If enabled the tessellator will consider creating corners based on the various input parameters.
         */
        public smartSprite: boolean;
        /**
         * If enabled, the tessellator will adapt the size of the quads based on the height of the edge.
         */
        public adaptiveUV: boolean;
        /**
         * The borders to be used for calculating the uv of the edges based on the border info found in Sprites.
         */
        public spriteBorders: boolean;
        /**
         * Stretch the UV mapping for the Fill texture.
         */
        public stretchUV: boolean;
        
                    
    }
    /**
     * SpriteShapeSegment contains info of sub-meshes generated by the SpriteShape generator C# Job later fed to SpriteShapeRenderer.
     */
    class SpriteShapeSegment extends System.ValueType {
        /**
         * Geometry index of list of sub-meshes generated by SpriteShape.
         */
        public get geomIndex(): number;
        public set geomIndex(value: number);
        /**
         * Index count of SpriteShape sub-mesh.
         */
        public get indexCount(): number;
        public set indexCount(value: number);
        /**
         * Vertex count of SpriteShape sub-mesh.
         */
        public get vertexCount(): number;
        public set vertexCount(value: number);
        /**
         * Index of  sprite that is used to generate segment/corner for this SpriteShapeSegment.
         */
        public get spriteIndex(): number;
        public set spriteIndex(value: number);
        
        public get_Clone(): SpriteShapeSegment;            
    }
    /**
     * Renders SpriteShapes defined through the SpriteShapeUtility.GenerateSpriteShape API.
     */
    class SpriteShapeRenderer extends UnityEngine.Renderer {
        /**
         * Rendering color for the SpriteShape.
         */
        public get color(): UnityEngine.Color;
        public set color(value: UnityEngine.Color);
        /**
         * Specifies how the SpriteShape interacts with the masks.
         */
        public get maskInteraction(): UnityEngine.SpriteMaskInteraction;
        public set maskInteraction(value: UnityEngine.SpriteMaskInteraction);
        
        public constructor();
        /**
         * Prepare and generate the SpriteShape geometry that will be fed to SpriteShape generator for rendering.
         * @param handle JobHandle for the C# based SpriteShape Generator Job.
         * @param shapeParams Sprite Shape generation input params.
         * @param sprites Input list of Sprites.
         */
        public Prepare($handle: Unity_Jobs.JobHandle, $shapeParams: SpriteShapeParameters, $sprites: UnityEngine.Sprite[]):void;
        /**
         * Get Bounds data as NativeArray. The array count of this NativeArray will always be 1.
         * @returns NativeArray of Bounds of SpriteShapeRenderer. The size of this will always be 1.
         */
        public GetBounds():Unity_Collections.NativeArray$1<UnityEngine.Bounds>;
        /**
         * Get/Set an array of segments of SpriteShapeRenderer.
         * @param dataSize Size to be reserved for the segments array.
         * @returns Size to be reserved for the NativeArray.
         */
        public GetSegments($dataSize: number):Unity_Collections.NativeArray$1<SpriteShapeSegment>;
        
        public GetChannels($dataSize: number, $indices: $Ref<Unity_Collections.NativeArray$1<number>>, $vertices: $Ref<Unity_Collections.NativeSlice$1<UnityEngine.Vector3>>, $texcoords: $Ref<Unity_Collections.NativeSlice$1<UnityEngine.Vector2>>):void;
        
        public GetChannels($dataSize: number, $indices: $Ref<Unity_Collections.NativeArray$1<number>>, $vertices: $Ref<Unity_Collections.NativeSlice$1<UnityEngine.Vector3>>, $texcoords: $Ref<Unity_Collections.NativeSlice$1<UnityEngine.Vector2>>, $tangents: $Ref<Unity_Collections.NativeSlice$1<UnityEngine.Vector4>>):void;
        
        public GetChannels($dataSize: number, $indices: $Ref<Unity_Collections.NativeArray$1<number>>, $vertices: $Ref<Unity_Collections.NativeSlice$1<UnityEngine.Vector3>>, $texcoords: $Ref<Unity_Collections.NativeSlice$1<UnityEngine.Vector2>>, $tangents: $Ref<Unity_Collections.NativeSlice$1<UnityEngine.Vector4>>, $normals: $Ref<Unity_Collections.NativeSlice$1<UnityEngine.Vector3>>):void;
        
                    
    }
    /**
     * Additional data about the shape's control point. This is useful during tessellation of the shape.
     */
    class SpriteShapeMetaData extends System.ValueType {
        /**
         * The height of the tessellated edge.
         */
        public height: number;
        /**
         * The threshold of the angle that decides if it should be tessellated as a curve or a corner.
         */
        public bevelCutoff: number;
        /**
         * The radius of the curve to be tessellated.
         */
        public bevelSize: number;
        /**
         * The Sprite to be used for a particular edge.
         */
        public spriteIndex: number;
        /**
         * True will indicate that this point should be tessellated as a corner or a continuous line otherwise.
         */
        public corner: boolean;
        
                    
    }
    /**
     * Data that describes the important points of the shape.
     */
    class ShapeControlPoint extends System.ValueType {
        /**
         * The position of this point in the object's local space.
         */
        public position: UnityEngine.Vector3;
        /**
         * The position of the left tangent in local space.
         */
        public leftTangent: UnityEngine.Vector3;
        /**
         * The position of the right tangent point in the local space.
         */
        public rightTangent: UnityEngine.Vector3;
        /**
         * The various modes of the tangent handles. They could be continuous or broken.
         */
        public mode: number;
        
        public get_Clone(): ShapeControlPoint;            
    }
    /**
     * Describes the information about the edge and how to tessellate it.
     */
    class AngleRangeInfo extends System.ValueType {
        /**
         * The minimum angle to be considered within this range.
         */
        public start: number;
        /**
         * The maximum angle to be considered within this range.
         */
        public end: number;
        /**
         * The render order of the edges that belong in this range.
         */
        public order: number;
        /**
         * The list of Sprites that are associated with this range.
         */
        public sprites: number[];
        
                    
    }
    /**
     * A static class that helps tessellate a SpriteShape mesh.
     */
    class SpriteShapeUtility extends System.Object {
        
        public constructor();
        /**
         * Generate a mesh based on input parameters.
         * @param mesh The output mesh.
         * @param shapeParams Input parameters for the SpriteShape tessellator.
         * @param points A list of control points that describes the shape.
         * @param metaData Additional data about the shape's control point. This is useful during tessellation of the shape.
         * @param sprites The list of Sprites that could be used for the edges.
         * @param corners The list of Sprites that could be used for the corners.
         * @param angleRange A parameter that determins how to tessellate each of the edge.
         */
        public static Generate($mesh: UnityEngine.Mesh, $shapeParams: SpriteShapeParameters, $points: ShapeControlPoint[], $metaData: SpriteShapeMetaData[], $angleRange: AngleRangeInfo[], $sprites: UnityEngine.Sprite[], $corners: UnityEngine.Sprite[]):number[];
        /**
         * Generate a mesh based on input parameters.
         * @param renderer SpriteShapeRenderer to which the generated geometry is fed to.
         * @param shapeParams Input parameters for the SpriteShape tessellator.
         * @param points A list of control points that describes the shape.
         * @param metaData Additional data about the shape's control point. This is useful during tessellation of the shape.
         * @param sprites The list of Sprites that could be used for the edges.
         * @param corners The list of Sprites that could be used for the corners.
         * @param angleRange A parameter that determins how to tessellate each of the edge.
         */
        public static GenerateSpriteShape($renderer: SpriteShapeRenderer, $shapeParams: SpriteShapeParameters, $points: ShapeControlPoint[], $metaData: SpriteShapeMetaData[], $angleRange: AngleRangeInfo[], $sprites: UnityEngine.Sprite[], $corners: UnityEngine.Sprite[]):void;
        
                    
    }
    
}
declare module 'System' {

        
    
    interface ValueType extends Object {
        
                    
    }
    
    interface Object {
        
                    
    }
    
    interface UInt32 extends ValueType {
        
                    
    }
    
    interface Single extends ValueType {
        
                    
    }
    
    interface Boolean extends ValueType {
        
                    
    }
    
    interface Int32 extends ValueType {
        
                    
    }
    
    interface Void extends ValueType {
        
                    
    }
    
    interface Enum extends ValueType {
        
                    
    }
    
    interface Array extends Object {
        
                    
    }
    
}
declare module 'UnityEngine' {

    import * as System from 'System';
        
    /**
     * A standard 4x4 transformation matrix.
     */
    interface Matrix4x4 extends System.ValueType {
        
                    
    }
    /**
     * Class that represents textures in C# code.
     */
    interface Texture2D extends Texture {
        
                    
    }
    /**
     * Base class for Texture handling.
     */
    interface Texture extends Object {
        
                    
    }
    /**
     * Base class for all objects Unity can reference.
     */
    interface Object extends System.Object {
        
                    
    }
    /**
     * General functionality for all renderers.
     */
    interface Renderer extends Component {
        
                    
    }
    /**
     * Base class for everything attached to GameObjects.
     */
    interface Component extends Object {
        
                    
    }
    /**
     * Representation of RGBA colors.
     */
    interface Color extends System.ValueType {
        
                    
    }
    /**
     * This enum controls the mode under which the sprite will interact with the masking system.
     */
    enum SpriteMaskInteraction { None = 0, VisibleInsideMask = 1, VisibleOutsideMask = 2 }
    /**
     * Represents a Sprite object for use in 2D gameplay.
     */
    interface Sprite extends Object {
        
                    
    }
    /**
     * Represents an axis aligned bounding box.
     */
    interface Bounds extends System.ValueType {
        
                    
    }
    /**
     * Representation of 3D vectors and points.
     */
    interface Vector3 extends System.ValueType {
        
                    
    }
    /**
     * A class that allows you to create or modify meshes.
     */
    interface Mesh extends Object {
        
                    
    }
    
}
declare module 'Unity.Jobs' {

    import * as System from 'System';
        
    /**
     * JobHandle.
     */
    interface JobHandle extends System.ValueType {
        
                    
    }
    
}
declare module 'Unity.Collections' {

    import * as System from 'System';
        
    /**
     * A NativeArray exposes a buffer of native memory to managed code, making it possible to share data between managed and native without marshalling costs.
     */
    interface NativeArray$1<T> extends System.ValueType {
        
                    
    }
    /**
     * Native Slice.
     */
    interface NativeSlice$1<T> extends System.ValueType {
        
                    
    }
    
}

